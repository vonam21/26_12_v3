
26_12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b50  08003b50  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b50  08003b50  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b50  08003b50  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  2000005c  08003bb4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08003bb4  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000080d4  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000173c  00000000  00000000  0002819c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  000298d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059f  00000000  00000000  0002a038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017620  00000000  00000000  0002a5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000990f  00000000  00000000  00041bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087051  00000000  00000000  0004b506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022f8  00000000  00000000  000d2558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d4850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080039b4 	.word	0x080039b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080039b4 	.word	0x080039b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2f>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000734:	bf24      	itt	cs
 8000736:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800073a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800073e:	d90d      	bls.n	800075c <__aeabi_d2f+0x30>
 8000740:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000744:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000748:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800074c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000750:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000754:	bf08      	it	eq
 8000756:	f020 0001 	biceq.w	r0, r0, #1
 800075a:	4770      	bx	lr
 800075c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000760:	d121      	bne.n	80007a6 <__aeabi_d2f+0x7a>
 8000762:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000766:	bfbc      	itt	lt
 8000768:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800076c:	4770      	bxlt	lr
 800076e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000772:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000776:	f1c2 0218 	rsb	r2, r2, #24
 800077a:	f1c2 0c20 	rsb	ip, r2, #32
 800077e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	bf18      	it	ne
 8000788:	f040 0001 	orrne.w	r0, r0, #1
 800078c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000790:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000794:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000798:	ea40 000c 	orr.w	r0, r0, ip
 800079c:	fa23 f302 	lsr.w	r3, r3, r2
 80007a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007a4:	e7cc      	b.n	8000740 <__aeabi_d2f+0x14>
 80007a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007aa:	d107      	bne.n	80007bc <__aeabi_d2f+0x90>
 80007ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007b0:	bf1e      	ittt	ne
 80007b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ba:	4770      	bxne	lr
 80007bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <count_cycles_state>:
uint32_t count,cycles,count_cycles[100],arr[100];
uint8_t data[4];
uint8_t arr_low[50];
uint8_t arr_high[50];
uint8_t arr_endline[50] = "\n\n";
uint32_t count_cycles_state(bool n) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
    count =0;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <count_cycles_state+0x48>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == n) {
 80007dc:	e00b      	b.n	80007f6 <count_cycles_state+0x2a>
        count++;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <count_cycles_state+0x48>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <count_cycles_state+0x48>)
 80007e6:	6013      	str	r3, [r2, #0]
	if(count > 50) {
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <count_cycles_state+0x48>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b32      	cmp	r3, #50	; 0x32
 80007ee:	d902      	bls.n	80007f6 <count_cycles_state+0x2a>
		return count;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <count_cycles_state+0x48>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	e00a      	b.n	800080c <count_cycles_state+0x40>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == n) {
 80007f6:	2120      	movs	r1, #32
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <count_cycles_state+0x4c>)
 80007fa:	f001 fd3b 	bl	8002274 <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	429a      	cmp	r2, r3
 8000806:	d0ea      	beq.n	80007de <count_cycles_state+0x12>
	}
    }
    return count;
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <count_cycles_state+0x48>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000120 	.word	0x20000120
 8000818:	40010800 	.word	0x40010800

0800081c <Read_DHT11>:
void Read_DHT11(uint32_t* arr,uint8_t* data) {
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b08d      	sub	sp, #52	; 0x34
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000834:	2301      	movs	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800083c:	2320      	movs	r3, #32
 800083e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	4619      	mov	r1, r3
 800084a:	4872      	ldr	r0, [pc, #456]	; (8000a14 <Read_DHT11+0x1f8>)
 800084c:	f001 fb8e 	bl	8001f6c <HAL_GPIO_Init>

  HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 ff5d 	bl	8001710 <HAL_Delay>


  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 800085a:	2301      	movs	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800085e:	2320      	movs	r3, #32
 8000860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2302      	movs	r3, #2
 8000864:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4619      	mov	r1, r3
 800086c:	4869      	ldr	r0, [pc, #420]	; (8000a14 <Read_DHT11+0x1f8>)
 800086e:	f001 fb7d 	bl	8001f6c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	4867      	ldr	r0, [pc, #412]	; (8000a14 <Read_DHT11+0x1f8>)
 8000878:	f001 fd13 	bl	80022a2 <HAL_GPIO_WritePin>

  HAL_Delay(20);
 800087c:	2014      	movs	r0, #20
 800087e:	f000 ff47 	bl	8001710 <HAL_Delay>

  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000882:	2301      	movs	r3, #1
 8000884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800088a:	2320      	movs	r3, #32
 800088c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2302      	movs	r3, #2
 8000890:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4619      	mov	r1, r3
 8000898:	485e      	ldr	r0, [pc, #376]	; (8000a14 <Read_DHT11+0x1f8>)
 800089a:	f001 fb67 	bl	8001f6c <HAL_GPIO_Init>
  for(int i=0;i< 160;i++) {
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008a2:	e003      	b.n	80008ac <Read_DHT11+0x90>
	  __NOP();
 80008a4:	bf00      	nop
  for(int i=0;i< 160;i++) {
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	3301      	adds	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	2b9f      	cmp	r3, #159	; 0x9f
 80008b0:	ddf8      	ble.n	80008a4 <Read_DHT11+0x88>
  }
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0);
 80008b2:	bf00      	nop
 80008b4:	2120      	movs	r1, #32
 80008b6:	4857      	ldr	r0, [pc, #348]	; (8000a14 <Read_DHT11+0x1f8>)
 80008b8:	f001 fcdc 	bl	8002274 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f8      	beq.n	80008b4 <Read_DHT11+0x98>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1);
 80008c2:	bf00      	nop
 80008c4:	2120      	movs	r1, #32
 80008c6:	4853      	ldr	r0, [pc, #332]	; (8000a14 <Read_DHT11+0x1f8>)
 80008c8:	f001 fcd4 	bl	8002274 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d0f8      	beq.n	80008c4 <Read_DHT11+0xa8>

  for(int i=0; i< 100 ; i+=2) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80008d6:	e027      	b.n	8000928 <Read_DHT11+0x10c>
	  count_cycles[i] = count_cycles_state(0);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff ff77 	bl	80007cc <count_cycles_state>
 80008de:	4602      	mov	r2, r0
 80008e0:	494d      	ldr	r1, [pc, #308]	; (8000a18 <Read_DHT11+0x1fc>)
 80008e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  count_cycles[i+1] = count_cycles_state(1);
 80008e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ea:	1c5c      	adds	r4, r3, #1
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff ff6d 	bl	80007cc <count_cycles_state>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a48      	ldr	r2, [pc, #288]	; (8000a18 <Read_DHT11+0x1fc>)
 80008f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  arr[i] = count_cycles[i];
 80008fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4945      	ldr	r1, [pc, #276]	; (8000a18 <Read_DHT11+0x1fc>)
 8000904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000906:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800090a:	601a      	str	r2, [r3, #0]
	  arr[i+1] = count_cycles[i+1];
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000912:	3301      	adds	r3, #1
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	440b      	add	r3, r1
 800091a:	493f      	ldr	r1, [pc, #252]	; (8000a18 <Read_DHT11+0x1fc>)
 800091c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000920:	601a      	str	r2, [r3, #0]
  for(int i=0; i< 100 ; i+=2) {
 8000922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000924:	3302      	adds	r3, #2
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	2b63      	cmp	r3, #99	; 0x63
 800092c:	ddd4      	ble.n	80008d8 <Read_DHT11+0xbc>
  }

  data[1] = 0x00;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
  data[2] = 0x00;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	3302      	adds	r3, #2
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
  data[3] = 0x00;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	3303      	adds	r3, #3
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
  data[4] = 0x00;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	3304      	adds	r3, #4
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 40; ++i) {
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
 8000952:	e03d      	b.n	80009d0 <Read_DHT11+0x1b4>
	  uint32_t lowCycles = arr[2 * i];
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	61fb      	str	r3, [r7, #28]
	  uint32_t highCycles = arr[2 * i + 1];
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	3304      	adds	r3, #4
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	61bb      	str	r3, [r7, #24]
	  if ((lowCycles >= CYCLE_MAX) || (highCycles >= CYCLE_MAX)) {
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	2b31      	cmp	r3, #49	; 0x31
 8000972:	d802      	bhi.n	800097a <Read_DHT11+0x15e>
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2b31      	cmp	r3, #49	; 0x31
 8000978:	d904      	bls.n	8000984 <Read_DHT11+0x168>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	4827      	ldr	r0, [pc, #156]	; (8000a1c <Read_DHT11+0x200>)
 8000980:	f001 fca7 	bl	80022d2 <HAL_GPIO_TogglePin>
	  }
	  data[i / 8] <<= 1;
 8000984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000986:	2b00      	cmp	r3, #0
 8000988:	da00      	bge.n	800098c <Read_DHT11+0x170>
 800098a:	3307      	adds	r3, #7
 800098c:	10db      	asrs	r3, r3, #3
 800098e:	4619      	mov	r1, r3
 8000990:	460a      	mov	r2, r1
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	440b      	add	r3, r1
 800099c:	0052      	lsls	r2, r2, #1
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	701a      	strb	r2, [r3, #0]
	  if (highCycles > lowCycles) {
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d90f      	bls.n	80009ca <Read_DHT11+0x1ae>
		  data[i / 8] |= 1;
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	da00      	bge.n	80009b2 <Read_DHT11+0x196>
 80009b0:	3307      	adds	r3, #7
 80009b2:	10db      	asrs	r3, r3, #3
 80009b4:	4619      	mov	r1, r3
 80009b6:	460a      	mov	r2, r1
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	440b      	add	r3, r1
 80009c2:	f042 0201 	orr.w	r2, r2, #1
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 40; ++i) {
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	3301      	adds	r3, #1
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	2b27      	cmp	r3, #39	; 0x27
 80009d4:	ddbe      	ble.n	8000954 <Read_DHT11+0x138>
	  }

  }
  uint8_t check_sum = ( data[0]+ data[1]+ data[2]+ data[3] ) & 0xFF;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	3302      	adds	r3, #2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	3303      	adds	r3, #3
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if(check_sum == data[4]) {
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	3304      	adds	r3, #4
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d000      	beq.n	8000a0a <Read_DHT11+0x1ee>

  }else {
	  while(1);
 8000a08:	e7fe      	b.n	8000a08 <Read_DHT11+0x1ec>
  }




}
 8000a0a:	bf00      	nop
 8000a0c:	3734      	adds	r7, #52	; 0x34
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010800 	.word	0x40010800
 8000a18:	20000124 	.word	0x20000124
 8000a1c:	40011000 	.word	0x40011000

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b5b0      	push	{r4, r5, r7, lr}
 8000a22:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t buffer[20]= "gia tri ADC la:";
 8000a28:	4b71      	ldr	r3, [pc, #452]	; (8000bf0 <main+0x1d0>)
 8000a2a:	f507 64fe 	add.w	r4, r7, #2032	; 0x7f0
 8000a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	char chuoi_n[50];
	uint8_t chuoi_ret[1000];
	uint8_t chuoi_met[50];
	uint8_t chuoi1[20];
	uint8_t chuoi1_t[20];
	uint8_t stt[20]= "\n\n\n\n";
 8000a3a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000a3e:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 8000a42:	496c      	ldr	r1, [pc, #432]	; (8000bf4 <main+0x1d4>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	c903      	ldmia	r1, {r0, r1}
 8000a48:	6018      	str	r0, [r3, #0]
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	7019      	strb	r1, [r3, #0]
 8000a4e:	1d53      	adds	r3, r2, #5
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	f8c3 200b 	str.w	r2, [r3, #11]
	uint16_t var_adc =0,var_adc_2=0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fdf0 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 fb3e 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 fc3c 	bl	80012ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a74:	f000 fb94 	bl	80011a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000a78:	f000 fc0e 	bl	8001298 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000a7c:	f000 fbce 	bl	800121c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000a80:	485d      	ldr	r0, [pc, #372]	; (8000bf8 <main+0x1d8>)
 8000a82:	f000 ff41 	bl	8001908 <HAL_ADC_Start>
  HAL_Delay(50);
 8000a86:	2032      	movs	r0, #50	; 0x32
 8000a88:	f000 fe42 	bl	8001710 <HAL_Delay>
  HAL_ADC_Start(&hadc2);
 8000a8c:	485b      	ldr	r0, [pc, #364]	; (8000bfc <main+0x1dc>)
 8000a8e:	f000 ff3b 	bl	8001908 <HAL_ADC_Start>
  HAL_Delay(50);
 8000a92:	2032      	movs	r0, #50	; 0x32
 8000a94:	f000 fe3c 	bl	8001710 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  HAL_UART_Transmit(&huart1, buffer,strlen((const char*)buffer),10);
 8000a98:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fb57 	bl	8000150 <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8000aaa:	230a      	movs	r3, #10
 8000aac:	4854      	ldr	r0, [pc, #336]	; (8000c00 <main+0x1e0>)
 8000aae:	f002 f93f 	bl	8002d30 <HAL_UART_Transmit>
	  	  HAL_Delay(5000);
 8000ab2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ab6:	f000 fe2b 	bl	8001710 <HAL_Delay>
	  	  Read_DHT11(arr,data); // đ ?c dht11
 8000aba:	4952      	ldr	r1, [pc, #328]	; (8000c04 <main+0x1e4>)
 8000abc:	4852      	ldr	r0, [pc, #328]	; (8000c08 <main+0x1e8>)
 8000abe:	f7ff fead 	bl	800081c <Read_DHT11>
	  	  float temp = data[2] + data[3]*0.1;
 8000ac2:	4b50      	ldr	r3, [pc, #320]	; (8000c04 <main+0x1e4>)
 8000ac4:	789b      	ldrb	r3, [r3, #2]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fdc6 	bl	8000658 <__aeabi_i2d>
 8000acc:	4604      	mov	r4, r0
 8000ace:	460d      	mov	r5, r1
 8000ad0:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <main+0x1e4>)
 8000ad2:	78db      	ldrb	r3, [r3, #3]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fdbf 	bl	8000658 <__aeabi_i2d>
 8000ada:	a343      	add	r3, pc, #268	; (adr r3, 8000be8 <main+0x1c8>)
 8000adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae0:	f7ff fb3e 	bl	8000160 <__aeabi_dmul>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	4620      	mov	r0, r4
 8000aea:	4629      	mov	r1, r5
 8000aec:	f7ff fc68 	bl	80003c0 <__adddf3>
 8000af0:	4602      	mov	r2, r0
 8000af2:	460b      	mov	r3, r1
 8000af4:	4610      	mov	r0, r2
 8000af6:	4619      	mov	r1, r3
 8000af8:	f7ff fe18 	bl	800072c <__aeabi_d2f>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	  	  float humi = data[0] + data[1]*0.1;
 8000b02:	4b40      	ldr	r3, [pc, #256]	; (8000c04 <main+0x1e4>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fda6 	bl	8000658 <__aeabi_i2d>
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	460d      	mov	r5, r1
 8000b10:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <main+0x1e4>)
 8000b12:	785b      	ldrb	r3, [r3, #1]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fd9f 	bl	8000658 <__aeabi_i2d>
 8000b1a:	a333      	add	r3, pc, #204	; (adr r3, 8000be8 <main+0x1c8>)
 8000b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b20:	f7ff fb1e 	bl	8000160 <__aeabi_dmul>
 8000b24:	4602      	mov	r2, r0
 8000b26:	460b      	mov	r3, r1
 8000b28:	4620      	mov	r0, r4
 8000b2a:	4629      	mov	r1, r5
 8000b2c:	f7ff fc48 	bl	80003c0 <__adddf3>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4610      	mov	r0, r2
 8000b36:	4619      	mov	r1, r3
 8000b38:	f7ff fdf8 	bl	800072c <__aeabi_d2f>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	  	  int a =data[2];
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <main+0x1e4>)
 8000b44:	789b      	ldrb	r3, [r3, #2]
 8000b46:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
	  	  int b =data[3];
 8000b4a:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <main+0x1e4>)
 8000b4c:	78db      	ldrb	r3, [r3, #3]
 8000b4e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
	  	  int c =data[0];
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <main+0x1e4>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
	  	  int d =data[1];
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <main+0x1e4>)
 8000b5c:	785b      	ldrb	r3, [r3, #1]
 8000b5e:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	  	  char tx_humi[100];
	  	  char tx[100];
	  	  char space[]  = " ";
 8000b62:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000b66:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	801a      	strh	r2, [r3, #0]
	  	  char end[] = "\r\n";
 8000b6e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000b72:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 8000b76:	4a25      	ldr	r2, [pc, #148]	; (8000c0c <main+0x1ec>)
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	8019      	strh	r1, [r3, #0]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	0c12      	lsrs	r2, r2, #16
 8000b82:	701a      	strb	r2, [r3, #0]
	  	  char total[300];
	  	  sprintf(tx_humi, "%d.%d", a, b);
 8000b84:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000b88:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000b8c:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8000b90:	491f      	ldr	r1, [pc, #124]	; (8000c10 <main+0x1f0>)
 8000b92:	f002 fa4d 	bl	8003030 <siprintf>
	  	  sprintf(tx, "%d.%d", c, d);
 8000b96:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000b9a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8000b9e:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8000ba2:	491b      	ldr	r1, [pc, #108]	; (8000c10 <main+0x1f0>)
 8000ba4:	f002 fa44 	bl	8003030 <siprintf>
	  	  var_adc = HAL_ADC_GetValue(&hadc1);   // đ ?c adc quang trở
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <main+0x1d8>)
 8000baa:	f000 ff5b 	bl	8001a64 <HAL_ADC_GetValue>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
	  	  var_adc_2 = HAL_ADC_GetValue(&hadc2);
 8000bb4:	4811      	ldr	r0, [pc, #68]	; (8000bfc <main+0x1dc>)
 8000bb6:	f000 ff55 	bl	8001a64 <HAL_ADC_GetValue>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
	  	  sprintf(buffer_adc, "%ld", var_adc);
 8000bc0:	f8b7 281e 	ldrh.w	r2, [r7, #2078]	; 0x81e
 8000bc4:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8000bc8:	4912      	ldr	r1, [pc, #72]	; (8000c14 <main+0x1f4>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 fa30 	bl	8003030 <siprintf>
	  	  sprintf(buffer_adc_2, "%ld", var_adc_2);
 8000bd0:	f8b7 281c 	ldrh.w	r2, [r7, #2076]	; 0x81c
 8000bd4:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8000bd8:	490e      	ldr	r1, [pc, #56]	; (8000c14 <main+0x1f4>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fa28 	bl	8003030 <siprintf>
	  	for(int i=0;i<300;i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8000be6:	e025      	b.n	8000c34 <main+0x214>
 8000be8:	9999999a 	.word	0x9999999a
 8000bec:	3fb99999 	.word	0x3fb99999
 8000bf0:	080039dc 	.word	0x080039dc
 8000bf4:	080039f0 	.word	0x080039f0
 8000bf8:	20000078 	.word	0x20000078
 8000bfc:	200000a8 	.word	0x200000a8
 8000c00:	200000d8 	.word	0x200000d8
 8000c04:	20000444 	.word	0x20000444
 8000c08:	200002b4 	.word	0x200002b4
 8000c0c:	08003a04 	.word	0x08003a04
 8000c10:	080039cc 	.word	0x080039cc
 8000c14:	080039d4 	.word	0x080039d4
	  		  			  total[i] =0;
 8000c18:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000c1c:	f5a3 62e4 	sub.w	r2, r3, #1824	; 0x720
 8000c20:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8000c24:	4413      	add	r3, r2
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
	  	for(int i=0;i<300;i++) {
 8000c2a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8000c2e:	3301      	adds	r3, #1
 8000c30:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8000c34:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8000c38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000c3c:	dbec      	blt.n	8000c18 <main+0x1f8>
	  		  		  }
	  	  strcat(total,tx_humi);
 8000c3e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fa19 	bl	8003080 <strcat>
	  	  strcat(total,space);
 8000c4e:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8000c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fa11 	bl	8003080 <strcat>
	  	  strcat(total,tx);
 8000c5e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 fa09 	bl	8003080 <strcat>
	  	  strcat(total,space);
 8000c6e:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8000c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fa01 	bl	8003080 <strcat>
	  	  strcat(total,buffer_adc);
 8000c7e:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8000c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 f9f9 	bl	8003080 <strcat>
	  	  strcat(total,space);
 8000c8e:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8000c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 f9f1 	bl	8003080 <strcat>
	  	  strcat(total,buffer_adc_2);
 8000c9e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8000ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 f9e9 	bl	8003080 <strcat>
	  	  strcat(total,end);
 8000cae:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8000cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 f9e1 	bl	8003080 <strcat>
	  //	  HAL_UART_Transmit(&huart1, total, strlen(total), 10);


	  	  HAL_Delay(3000);
 8000cbe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cc2:	f000 fd25 	bl	8001710 <HAL_Delay>
	  	  unsigned char data[] = "AT\r\n";
 8000cc6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000cca:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8000cce:	4a65      	ldr	r2, [pc, #404]	; (8000e64 <main+0x444>)
 8000cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd4:	6018      	str	r0, [r3, #0]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	7019      	strb	r1, [r3, #0]
	  	  HAL_UART_Transmit(&huart1, data, strlen(data), 10);
 8000cda:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fa36 	bl	8000150 <strlen>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8000cec:	230a      	movs	r3, #10
 8000cee:	485e      	ldr	r0, [pc, #376]	; (8000e68 <main+0x448>)
 8000cf0:	f002 f81e 	bl	8002d30 <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 8000cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf8:	f000 fd0a 	bl	8001710 <HAL_Delay>

	  	  unsigned char data_tat[] = "AT+CGEREP=0\r\n";
 8000cfc:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000d00:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8000d04:	4a59      	ldr	r2, [pc, #356]	; (8000e6c <main+0x44c>)
 8000d06:	461c      	mov	r4, r3
 8000d08:	4613      	mov	r3, r2
 8000d0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d0c:	c407      	stmia	r4!, {r0, r1, r2}
 8000d0e:	8023      	strh	r3, [r4, #0]
	  	  HAL_UART_Transmit(&huart1, data_tat, strlen(data_tat), 10);
 8000d10:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fa1b 	bl	8000150 <strlen>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 8000d22:	230a      	movs	r3, #10
 8000d24:	4850      	ldr	r0, [pc, #320]	; (8000e68 <main+0x448>)
 8000d26:	f002 f803 	bl	8002d30 <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 8000d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2e:	f000 fcef 	bl	8001710 <HAL_Delay>

	  	  unsigned char data1[] = "AT+CMQTTSTART\r\n";
 8000d32:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000d36:	f5a3 63ae 	sub.w	r3, r3, #1392	; 0x570
 8000d3a:	4a4d      	ldr	r2, [pc, #308]	; (8000e70 <main+0x450>)
 8000d3c:	461c      	mov	r4, r3
 8000d3e:	4613      	mov	r3, r2
 8000d40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  	  HAL_UART_Transmit(&huart1, data1, strlen(data1), 10);
 8000d46:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fa00 	bl	8000150 <strlen>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	f507 712e 	add.w	r1, r7, #696	; 0x2b8
 8000d58:	230a      	movs	r3, #10
 8000d5a:	4843      	ldr	r0, [pc, #268]	; (8000e68 <main+0x448>)
 8000d5c:	f001 ffe8 	bl	8002d30 <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f000 fcd4 	bl	8001710 <HAL_Delay>

	  	  unsigned char data2[] = "AT+CMQTTACCQ=0,\"clientID\"\r\n";
 8000d68:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000d6c:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8000d70:	4a40      	ldr	r2, [pc, #256]	; (8000e74 <main+0x454>)
 8000d72:	461c      	mov	r4, r3
 8000d74:	4615      	mov	r5, r2
 8000d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  	  HAL_UART_Transmit(&huart1, data2, strlen(data2), 10);
 8000d82:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff f9e2 	bl	8000150 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	f507 7127 	add.w	r1, r7, #668	; 0x29c
 8000d94:	230a      	movs	r3, #10
 8000d96:	4834      	ldr	r0, [pc, #208]	; (8000e68 <main+0x448>)
 8000d98:	f001 ffca 	bl	8002d30 <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 8000d9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da0:	f000 fcb6 	bl	8001710 <HAL_Delay>


	  	  while(1) {
	  		  Read_DHT11(arr,data);
 8000da4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8000da8:	4619      	mov	r1, r3
 8000daa:	4833      	ldr	r0, [pc, #204]	; (8000e78 <main+0x458>)
 8000dac:	f7ff fd36 	bl	800081c <Read_DHT11>
	  		  a =data[2];
 8000db0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000db4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8000db8:	789b      	ldrb	r3, [r3, #2]
 8000dba:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
	  		  b =data[3];
 8000dbe:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000dc2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8000dc6:	78db      	ldrb	r3, [r3, #3]
 8000dc8:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
	  		  c =data[0];
 8000dcc:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000dd0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
	  		  d =data[1];
 8000dda:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000dde:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8000de2:	785b      	ldrb	r3, [r3, #1]
 8000de4:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	  		  sprintf(tx_humi, "%d.%d", a, b);
 8000de8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000dec:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000df0:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8000df4:	4921      	ldr	r1, [pc, #132]	; (8000e7c <main+0x45c>)
 8000df6:	f002 f91b 	bl	8003030 <siprintf>
	  		  sprintf(tx, "%d.%d", c, d);
 8000dfa:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000dfe:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8000e02:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8000e06:	491d      	ldr	r1, [pc, #116]	; (8000e7c <main+0x45c>)
 8000e08:	f002 f912 	bl	8003030 <siprintf>
	  		  HAL_ADC_Start(&hadc1);
 8000e0c:	481c      	ldr	r0, [pc, #112]	; (8000e80 <main+0x460>)
 8000e0e:	f000 fd7b 	bl	8001908 <HAL_ADC_Start>
	  		  HAL_Delay(50);
 8000e12:	2032      	movs	r0, #50	; 0x32
 8000e14:	f000 fc7c 	bl	8001710 <HAL_Delay>
	  		  var_adc = HAL_ADC_GetValue(&hadc1);   // đ ?c adc quang trở
 8000e18:	4819      	ldr	r0, [pc, #100]	; (8000e80 <main+0x460>)
 8000e1a:	f000 fe23 	bl	8001a64 <HAL_ADC_GetValue>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
	  		  HAL_ADC_Start(&hadc2);
 8000e24:	4817      	ldr	r0, [pc, #92]	; (8000e84 <main+0x464>)
 8000e26:	f000 fd6f 	bl	8001908 <HAL_ADC_Start>
	  		  HAL_Delay(50);
 8000e2a:	2032      	movs	r0, #50	; 0x32
 8000e2c:	f000 fc70 	bl	8001710 <HAL_Delay>
	  		  var_adc_2 = HAL_ADC_GetValue(&hadc2);
 8000e30:	4814      	ldr	r0, [pc, #80]	; (8000e84 <main+0x464>)
 8000e32:	f000 fe17 	bl	8001a64 <HAL_ADC_GetValue>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
			  sprintf(buffer_adc, "%d", var_adc);
 8000e3c:	f8b7 281e 	ldrh.w	r2, [r7, #2078]	; 0x81e
 8000e40:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8000e44:	4910      	ldr	r1, [pc, #64]	; (8000e88 <main+0x468>)
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 f8f2 	bl	8003030 <siprintf>
			  sprintf(buffer_adc_2, "%ld", var_adc_2);
 8000e4c:	f8b7 281c 	ldrh.w	r2, [r7, #2076]	; 0x81c
 8000e50:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8000e54:	490d      	ldr	r1, [pc, #52]	; (8000e8c <main+0x46c>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 f8ea 	bl	8003030 <siprintf>
	  		  for(int i=0;i<300;i++) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8000e62:	e023      	b.n	8000eac <main+0x48c>
 8000e64:	08003a08 	.word	0x08003a08
 8000e68:	200000d8 	.word	0x200000d8
 8000e6c:	08003a10 	.word	0x08003a10
 8000e70:	08003a20 	.word	0x08003a20
 8000e74:	08003a30 	.word	0x08003a30
 8000e78:	200002b4 	.word	0x200002b4
 8000e7c:	080039cc 	.word	0x080039cc
 8000e80:	20000078 	.word	0x20000078
 8000e84:	200000a8 	.word	0x200000a8
 8000e88:	080039d8 	.word	0x080039d8
 8000e8c:	080039d4 	.word	0x080039d4
	  			  total[i] =0;
 8000e90:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000e94:	f5a3 62e4 	sub.w	r2, r3, #1824	; 0x720
 8000e98:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
	  		  for(int i=0;i<300;i++) {
 8000ea2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8000eac:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8000eb0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000eb4:	dbec      	blt.n	8000e90 <main+0x470>
	  		  }
	  		  strcat(total,tx_humi);
 8000eb6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 f8dd 	bl	8003080 <strcat>
	  		  strcat(total,space);
 8000ec6:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8000eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 f8d5 	bl	8003080 <strcat>
	  		  strcat(total,tx);
 8000ed6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 f8cd 	bl	8003080 <strcat>
	  		  strcat(total,space);
 8000ee6:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8000eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 f8c5 	bl	8003080 <strcat>
	  		  strcat(total,buffer_adc);
 8000ef6:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8000efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 f8bd 	bl	8003080 <strcat>
		  	  strcat(total,space);
 8000f06:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8000f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 f8b5 	bl	8003080 <strcat>
		  	  strcat(total,buffer_adc_2);
 8000f16:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8000f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 f8ad 	bl	8003080 <strcat>
	  		  strcat(total,end);
 8000f26:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8000f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 f8a5 	bl	8003080 <strcat>
	  		  unsigned char data3[] = "AT+CMQTTCONNECT=0,\"tcp://test.mosquitto.org:1883\",60,0\r\n";
 8000f36:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000f3a:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8000f3e:	4a63      	ldr	r2, [pc, #396]	; (80010cc <main+0x6ac>)
 8000f40:	461c      	mov	r4, r3
 8000f42:	4615      	mov	r5, r2
 8000f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f54:	c403      	stmia	r4!, {r0, r1}
 8000f56:	7022      	strb	r2, [r4, #0]
	  		  HAL_UART_Transmit(&huart1, data3, strlen(data3), 10);
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f8f8 	bl	8000150 <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	1d39      	adds	r1, r7, #4
 8000f66:	230a      	movs	r3, #10
 8000f68:	4859      	ldr	r0, [pc, #356]	; (80010d0 <main+0x6b0>)
 8000f6a:	f001 fee1 	bl	8002d30 <HAL_UART_Transmit>
	  		  HAL_Delay(1000);
 8000f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f72:	f000 fbcd 	bl	8001710 <HAL_Delay>

	  		  unsigned char data4[] = "AT+CMQTTTOPIC=0,5\r\n";
 8000f76:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000f7a:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8000f7e:	4a55      	ldr	r2, [pc, #340]	; (80010d4 <main+0x6b4>)
 8000f80:	461c      	mov	r4, r3
 8000f82:	4615      	mov	r5, r2
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	6023      	str	r3, [r4, #0]
	  		  HAL_UART_Transmit(&huart1, data4, strlen(data4), 10);
 8000f8c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f8dd 	bl	8000150 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	484b      	ldr	r0, [pc, #300]	; (80010d0 <main+0x6b0>)
 8000fa2:	f001 fec5 	bl	8002d30 <HAL_UART_Transmit>
	  		  HAL_Delay(10);
 8000fa6:	200a      	movs	r0, #10
 8000fa8:	f000 fbb2 	bl	8001710 <HAL_Delay>

	  		  unsigned char data5[] = "vonam\r\n";
 8000fac:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000fb0:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000fb4:	4a48      	ldr	r2, [pc, #288]	; (80010d8 <main+0x6b8>)
 8000fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fba:	e883 0003 	stmia.w	r3, {r0, r1}
	  		  HAL_UART_Transmit(&huart1, data5, strlen(data5), 10);
 8000fbe:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff f8c4 	bl	8000150 <strlen>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	f507 7120 	add.w	r1, r7, #640	; 0x280
 8000fd0:	230a      	movs	r3, #10
 8000fd2:	483f      	ldr	r0, [pc, #252]	; (80010d0 <main+0x6b0>)
 8000fd4:	f001 feac 	bl	8002d30 <HAL_UART_Transmit>
	  		  HAL_Delay(1000);
 8000fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fdc:	f000 fb98 	bl	8001710 <HAL_Delay>

	  		  unsigned char data6[] = "AT+CMQTTPAYLOAD=0,19\r\n";
 8000fe0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000fe4:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8000fe8:	4a3c      	ldr	r2, [pc, #240]	; (80010dc <main+0x6bc>)
 8000fea:	461c      	mov	r4, r3
 8000fec:	4615      	mov	r5, r2
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ff6:	6020      	str	r0, [r4, #0]
 8000ff8:	3404      	adds	r4, #4
 8000ffa:	8021      	strh	r1, [r4, #0]
 8000ffc:	3402      	adds	r4, #2
 8000ffe:	0c0b      	lsrs	r3, r1, #16
 8001000:	7023      	strb	r3, [r4, #0]
	  		  HAL_UART_Transmit(&huart1, data6, strlen(data6), 10);
 8001002:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff f8a2 	bl	8000150 <strlen>
 800100c:	4603      	mov	r3, r0
 800100e:	b29a      	uxth	r2, r3
 8001010:	f507 711a 	add.w	r1, r7, #616	; 0x268
 8001014:	230a      	movs	r3, #10
 8001016:	482e      	ldr	r0, [pc, #184]	; (80010d0 <main+0x6b0>)
 8001018:	f001 fe8a 	bl	8002d30 <HAL_UART_Transmit>
	  		  HAL_Delay(10);
 800101c:	200a      	movs	r0, #10
 800101e:	f000 fb77 	bl	8001710 <HAL_Delay>

	  		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001026:	482e      	ldr	r0, [pc, #184]	; (80010e0 <main+0x6c0>)
 8001028:	f001 f953 	bl	80022d2 <HAL_GPIO_TogglePin>
	  		  HAL_UART_Transmit(&huart1, total, strlen(total), 500);
 800102c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f88d 	bl	8000150 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800103e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001042:	4823      	ldr	r0, [pc, #140]	; (80010d0 <main+0x6b0>)
 8001044:	f001 fe74 	bl	8002d30 <HAL_UART_Transmit>
	  		  HAL_Delay(1000);
 8001048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104c:	f000 fb60 	bl	8001710 <HAL_Delay>

	  		  unsigned char data8[] = "AT+CMQTTPUB=0,1,60,0,0\r\n";
 8001050:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001054:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <main+0x6c4>)
 800105a:	461c      	mov	r4, r3
 800105c:	4615      	mov	r5, r2
 800105e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001062:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001066:	c403      	stmia	r4!, {r0, r1}
 8001068:	7022      	strb	r2, [r4, #0]
	  		  HAL_UART_Transmit(&huart1, data8, strlen(data8), 10);
 800106a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f86e 	bl	8000150 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	b29a      	uxth	r2, r3
 8001078:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 800107c:	230a      	movs	r3, #10
 800107e:	4814      	ldr	r0, [pc, #80]	; (80010d0 <main+0x6b0>)
 8001080:	f001 fe56 	bl	8002d30 <HAL_UART_Transmit>
	  		  HAL_Delay(1000);
 8001084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001088:	f000 fb42 	bl	8001710 <HAL_Delay>

	  		  unsigned char data9[] = "AT+CMQTTDISC=0,200\r\n";
 800108c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001090:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <main+0x6c8>)
 8001096:	461c      	mov	r4, r3
 8001098:	4615      	mov	r5, r2
 800109a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010a2:	6020      	str	r0, [r4, #0]
 80010a4:	3404      	adds	r4, #4
 80010a6:	7021      	strb	r1, [r4, #0]
	  		  HAL_UART_Transmit(&huart1, data9, strlen(data9), 10);
 80010a8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f84f 	bl	8000150 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	f507 710d 	add.w	r1, r7, #564	; 0x234
 80010ba:	230a      	movs	r3, #10
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <main+0x6b0>)
 80010be:	f001 fe37 	bl	8002d30 <HAL_UART_Transmit>
	  		  HAL_Delay(1000);
 80010c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c6:	f000 fb23 	bl	8001710 <HAL_Delay>
	  	  while(1) {
 80010ca:	e66b      	b.n	8000da4 <main+0x384>
 80010cc:	08003a4c 	.word	0x08003a4c
 80010d0:	200000d8 	.word	0x200000d8
 80010d4:	08003a88 	.word	0x08003a88
 80010d8:	08003a9c 	.word	0x08003a9c
 80010dc:	08003aa4 	.word	0x08003aa4
 80010e0:	40011000 	.word	0x40011000
 80010e4:	08003abc 	.word	0x08003abc
 80010e8:	08003ad8 	.word	0x08003ad8

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f6:	2228      	movs	r2, #40	; 0x28
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 ffb8 	bl	8003070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111c:	2301      	movs	r3, #1
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112a:	2301      	movs	r3, #1
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112e:	2302      	movs	r3, #2
 8001130:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001136:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001138:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800113c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001142:	4618      	mov	r0, r3
 8001144:	f001 f8de 	bl	8002304 <HAL_RCC_OscConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800114e:	f000 f919 	bl	8001384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001152:	230f      	movs	r3, #15
 8001154:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2101      	movs	r1, #1
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fb4b 	bl	8002808 <HAL_RCC_ClockConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001178:	f000 f904 	bl	8001384 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800117c:	2302      	movs	r3, #2
 800117e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001180:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001184:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fccb 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001194:	f000 f8f6 	bl	8001384 <Error_Handler>
  }
}
 8001198:	bf00      	nop
 800119a:	3750      	adds	r7, #80	; 0x50
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_ADC1_Init+0x74>)
 80011b2:	4a19      	ldr	r2, [pc, #100]	; (8001218 <MX_ADC1_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_ADC1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_ADC1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_ADC1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_ADC1_Init+0x74>)
 80011ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_ADC1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_ADC1_Init+0x74>)
 80011d8:	2201      	movs	r2, #1
 80011da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_ADC1_Init+0x74>)
 80011de:	f000 fabb 	bl	8001758 <HAL_ADC_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011e8:	f000 f8cc 	bl	8001384 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011ec:	2306      	movs	r3, #6
 80011ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_ADC1_Init+0x74>)
 80011fe:	f000 fc3d 	bl	8001a7c <HAL_ADC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001208:	f000 f8bc 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000078 	.word	0x20000078
 8001218:	40012400 	.word	0x40012400

0800121c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_ADC2_Init+0x74>)
 800122e:	4a19      	ldr	r2, [pc, #100]	; (8001294 <MX_ADC2_Init+0x78>)
 8001230:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_ADC2_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_ADC2_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_ADC2_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_ADC2_Init+0x74>)
 8001246:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800124a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_ADC2_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_ADC2_Init+0x74>)
 8001254:	2201      	movs	r2, #1
 8001256:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_ADC2_Init+0x74>)
 800125a:	f000 fa7d 	bl	8001758 <HAL_ADC_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001264:	f000 f88e 	bl	8001384 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001268:	2307      	movs	r3, #7
 800126a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800126c:	2301      	movs	r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_ADC2_Init+0x74>)
 800127a:	f000 fbff 	bl	8001a7c <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001284:	f000 f87e 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200000a8 	.word	0x200000a8
 8001294:	40012800 	.word	0x40012800

08001298 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_USART1_UART_Init+0x50>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012d0:	f001 fcde 	bl	8002c90 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012da:	f000 f853 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200000d8 	.word	0x200000d8
 80012e8:	40013800 	.word	0x40013800

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <MX_GPIO_Init+0x90>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <MX_GPIO_Init+0x90>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <MX_GPIO_Init+0x90>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <MX_GPIO_Init+0x90>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a17      	ldr	r2, [pc, #92]	; (800137c <MX_GPIO_Init+0x90>)
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_GPIO_Init+0x90>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_GPIO_Init+0x90>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a11      	ldr	r2, [pc, #68]	; (800137c <MX_GPIO_Init+0x90>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_GPIO_Init+0x90>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <MX_GPIO_Init+0x94>)
 8001350:	f000 ffa7 	bl	80022a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4619      	mov	r1, r3
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_GPIO_Init+0x94>)
 800136e:	f000 fdfd 	bl	8001f6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001372:	bf00      	nop
 8001374:	3720      	adds	r7, #32
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
 8001380:	40011000 	.word	0x40011000

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
}
 800138a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138c:	e7fe      	b.n	800138c <Error_Handler+0x8>
	...

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_MspInit+0x40>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <HAL_MspInit+0x40>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6193      	str	r3, [r2, #24]
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_MspInit+0x40>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_MspInit+0x40>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_MspInit+0x40>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_MspInit+0x40>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000

080013d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a28      	ldr	r2, [pc, #160]	; (8001490 <HAL_ADC_MspInit+0xbc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d122      	bne.n	800143a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a26      	ldr	r2, [pc, #152]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a20      	ldr	r2, [pc, #128]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001424:	2340      	movs	r3, #64	; 0x40
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001428:	2303      	movs	r3, #3
 800142a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0318 	add.w	r3, r7, #24
 8001430:	4619      	mov	r1, r3
 8001432:	4819      	ldr	r0, [pc, #100]	; (8001498 <HAL_ADC_MspInit+0xc4>)
 8001434:	f000 fd9a 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001438:	e026      	b.n	8001488 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_ADC_MspInit+0xc8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d121      	bne.n	8001488 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 800144a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_ADC_MspInit+0xc0>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001478:	2303      	movs	r3, #3
 800147a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_ADC_MspInit+0xc4>)
 8001484:	f000 fd72 	bl	8001f6c <HAL_GPIO_Init>
}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40012400 	.word	0x40012400
 8001494:	40021000 	.word	0x40021000
 8001498:	40010800 	.word	0x40010800
 800149c:	40012800 	.word	0x40012800

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <HAL_UART_MspInit+0x8c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d131      	bne.n	8001524 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a1a      	ldr	r2, [pc, #104]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_UART_MspInit+0x90>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	4619      	mov	r1, r3
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <HAL_UART_MspInit+0x94>)
 8001506:	f000 fd31 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800150a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	4619      	mov	r1, r3
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_UART_MspInit+0x94>)
 8001520:	f000 fd24 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40013800 	.word	0x40013800
 8001530:	40021000 	.word	0x40021000
 8001534:	40010800 	.word	0x40010800

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157e:	f000 f8ab 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f001 fd72 	bl	80030a0 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20005000 	.word	0x20005000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	20000448 	.word	0x20000448
 80015f0:	20000598 	.word	0x20000598

080015f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001600:	f7ff fff8 	bl	80015f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480b      	ldr	r0, [pc, #44]	; (8001634 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001606:	490c      	ldr	r1, [pc, #48]	; (8001638 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001608:	4a0c      	ldr	r2, [pc, #48]	; (800163c <LoopFillZerobss+0x16>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800161c:	4c09      	ldr	r4, [pc, #36]	; (8001644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f001 fd3f 	bl	80030ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162e:	f7ff f9f7 	bl	8000a20 <main>
  bx lr
 8001632:	4770      	bx	lr
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800163c:	08003b58 	.word	0x08003b58
  ldr r2, =_sbss
 8001640:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001644:	20000598 	.word	0x20000598

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_Init+0x28>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_Init+0x28>)
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 fc51 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	200f      	movs	r0, #15
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fe92 	bl	8001390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40022000 	.word	0x40022000

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fc5b 	bl	8001f52 <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 fc31 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x1c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x20>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a03      	ldr	r2, [pc, #12]	; (80016f8 <HAL_IncTick+0x20>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	20000008 	.word	0x20000008
 80016f8:	2000044c 	.word	0x2000044c

080016fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b02      	ldr	r3, [pc, #8]	; (800170c <HAL_GetTick+0x10>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	2000044c 	.word	0x2000044c

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff fff0 	bl	80016fc <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffe0 	bl	80016fc <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008

08001758 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0be      	b.n	80018f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fe1c 	bl	80013d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fabf 	bl	8001d20 <ADC_ConversionStop_Disable>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 8099 	bne.w	80018e6 <HAL_ADC_Init+0x18e>
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 8095 	bne.w	80018e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017c4:	f023 0302 	bic.w	r3, r3, #2
 80017c8:	f043 0202 	orr.w	r2, r3, #2
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7b1b      	ldrb	r3, [r3, #12]
 80017de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f0:	d003      	beq.n	80017fa <HAL_ADC_Init+0xa2>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d102      	bne.n	8001800 <HAL_ADC_Init+0xa8>
 80017fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fe:	e000      	b.n	8001802 <HAL_ADC_Init+0xaa>
 8001800:	2300      	movs	r3, #0
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7d1b      	ldrb	r3, [r3, #20]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d119      	bne.n	8001844 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7b1b      	ldrb	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	3b01      	subs	r3, #1
 800181e:	035a      	lsls	r2, r3, #13
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	e00b      	b.n	8001844 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f043 0220 	orr.w	r2, r3, #32
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	4b28      	ldr	r3, [pc, #160]	; (8001900 <HAL_ADC_Init+0x1a8>)
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	430b      	orrs	r3, r1
 800186a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001874:	d003      	beq.n	800187e <HAL_ADC_Init+0x126>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d104      	bne.n	8001888 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	3b01      	subs	r3, #1
 8001884:	051b      	lsls	r3, r3, #20
 8001886:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	430a      	orrs	r2, r1
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_ADC_Init+0x1ac>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d10b      	bne.n	80018c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	f023 0303 	bic.w	r3, r3, #3
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c2:	e018      	b.n	80018f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	f023 0312 	bic.w	r3, r3, #18
 80018cc:	f043 0210 	orr.w	r2, r3, #16
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018e4:	e007      	b.n	80018f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	f043 0210 	orr.w	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	ffe1f7fd 	.word	0xffe1f7fd
 8001904:	ff1f0efe 	.word	0xff1f0efe

08001908 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_ADC_Start+0x1a>
 800191e:	2302      	movs	r3, #2
 8001920:	e098      	b.n	8001a54 <HAL_ADC_Start+0x14c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f99e 	bl	8001c6c <ADC_Enable>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 8087 	bne.w	8001a4a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a41      	ldr	r2, [pc, #260]	; (8001a5c <HAL_ADC_Start+0x154>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d105      	bne.n	8001966 <HAL_ADC_Start+0x5e>
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_ADC_Start+0x158>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d115      	bne.n	8001992 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d026      	beq.n	80019ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001988:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001990:	e01d      	b.n	80019ce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <HAL_ADC_Start+0x158>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d004      	beq.n	80019b2 <HAL_ADC_Start+0xaa>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2b      	ldr	r2, [pc, #172]	; (8001a5c <HAL_ADC_Start+0x154>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10d      	bne.n	80019ce <HAL_ADC_Start+0xc6>
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_ADC_Start+0x158>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f023 0206 	bic.w	r2, r3, #6
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e6:	e002      	b.n	80019ee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f06f 0202 	mvn.w	r2, #2
 80019fe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a0e:	d113      	bne.n	8001a38 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a14:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_ADC_Start+0x154>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_ADC_Start+0x158>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d108      	bne.n	8001a38 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	e00c      	b.n	8001a52 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	e003      	b.n	8001a52 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40012800 	.word	0x40012800
 8001a60:	40012400 	.word	0x40012400

08001a64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x20>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e0dc      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1da>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b06      	cmp	r3, #6
 8001aaa:	d81c      	bhi.n	8001ae6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3b05      	subs	r3, #5
 8001abe:	221f      	movs	r2, #31
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4019      	ands	r1, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3b05      	subs	r3, #5
 8001ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae4:	e03c      	b.n	8001b60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	d81c      	bhi.n	8001b28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b23      	subs	r3, #35	; 0x23
 8001b00:	221f      	movs	r2, #31
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	4019      	ands	r1, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b23      	subs	r3, #35	; 0x23
 8001b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
 8001b26:	e01b      	b.n	8001b60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b41      	subs	r3, #65	; 0x41
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4019      	ands	r1, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	3b41      	subs	r3, #65	; 0x41
 8001b54:	fa00 f203 	lsl.w	r2, r0, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d91c      	bls.n	8001ba2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68d9      	ldr	r1, [r3, #12]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	3b1e      	subs	r3, #30
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	4019      	ands	r1, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6898      	ldr	r0, [r3, #8]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	3b1e      	subs	r3, #30
 8001b94:	fa00 f203 	lsl.w	r2, r0, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	e019      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6919      	ldr	r1, [r3, #16]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4019      	ands	r1, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6898      	ldr	r0, [r3, #8]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	fa00 f203 	lsl.w	r2, r0, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d003      	beq.n	8001be6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001be2:	2b11      	cmp	r3, #17
 8001be4:	d132      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d125      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d126      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c0c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b10      	cmp	r3, #16
 8001c14:	d11a      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	0c9a      	lsrs	r2, r3, #18
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c2c:	e002      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f9      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x1b2>
 8001c3a:	e007      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40012400 	.word	0x40012400
 8001c64:	20000000 	.word	0x20000000
 8001c68:	431bde83 	.word	0x431bde83

08001c6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d040      	beq.n	8001d0c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <ADC_Enable+0xac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <ADC_Enable+0xb0>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	0c9b      	lsrs	r3, r3, #18
 8001ca6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ca8:	e002      	b.n	8001cb0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f9      	bne.n	8001caa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cb6:	f7ff fd21 	bl	80016fc <HAL_GetTick>
 8001cba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cbc:	e01f      	b.n	8001cfe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cbe:	f7ff fd1d 	bl	80016fc <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d918      	bls.n	8001cfe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d011      	beq.n	8001cfe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f043 0210 	orr.w	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e007      	b.n	8001d0e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d1d8      	bne.n	8001cbe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	431bde83 	.word	0x431bde83

08001d20 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d12e      	bne.n	8001d98 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d4a:	f7ff fcd7 	bl	80016fc <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d50:	e01b      	b.n	8001d8a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d52:	f7ff fcd3 	bl	80016fc <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d914      	bls.n	8001d8a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d10d      	bne.n	8001d8a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e007      	b.n	8001d9a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d0dc      	beq.n	8001d52 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	; (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	; (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff90 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff49 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff5e 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff90 	bl	8001e5c <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5f 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffb0 	bl	8001ec0 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b08b      	sub	sp, #44	; 0x2c
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7e:	e169      	b.n	8002254 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f80:	2201      	movs	r2, #1
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f040 8158 	bne.w	800224e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a9a      	ldr	r2, [pc, #616]	; (800220c <HAL_GPIO_Init+0x2a0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d05e      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fa8:	4a98      	ldr	r2, [pc, #608]	; (800220c <HAL_GPIO_Init+0x2a0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d875      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fae:	4a98      	ldr	r2, [pc, #608]	; (8002210 <HAL_GPIO_Init+0x2a4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d058      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fb4:	4a96      	ldr	r2, [pc, #600]	; (8002210 <HAL_GPIO_Init+0x2a4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d86f      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fba:	4a96      	ldr	r2, [pc, #600]	; (8002214 <HAL_GPIO_Init+0x2a8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d052      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fc0:	4a94      	ldr	r2, [pc, #592]	; (8002214 <HAL_GPIO_Init+0x2a8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d869      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fc6:	4a94      	ldr	r2, [pc, #592]	; (8002218 <HAL_GPIO_Init+0x2ac>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d04c      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fcc:	4a92      	ldr	r2, [pc, #584]	; (8002218 <HAL_GPIO_Init+0x2ac>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d863      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fd2:	4a92      	ldr	r2, [pc, #584]	; (800221c <HAL_GPIO_Init+0x2b0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d046      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fd8:	4a90      	ldr	r2, [pc, #576]	; (800221c <HAL_GPIO_Init+0x2b0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d85d      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fde:	2b12      	cmp	r3, #18
 8001fe0:	d82a      	bhi.n	8002038 <HAL_GPIO_Init+0xcc>
 8001fe2:	2b12      	cmp	r3, #18
 8001fe4:	d859      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fe6:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <HAL_GPIO_Init+0x80>)
 8001fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fec:	08002067 	.word	0x08002067
 8001ff0:	08002041 	.word	0x08002041
 8001ff4:	08002053 	.word	0x08002053
 8001ff8:	08002095 	.word	0x08002095
 8001ffc:	0800209b 	.word	0x0800209b
 8002000:	0800209b 	.word	0x0800209b
 8002004:	0800209b 	.word	0x0800209b
 8002008:	0800209b 	.word	0x0800209b
 800200c:	0800209b 	.word	0x0800209b
 8002010:	0800209b 	.word	0x0800209b
 8002014:	0800209b 	.word	0x0800209b
 8002018:	0800209b 	.word	0x0800209b
 800201c:	0800209b 	.word	0x0800209b
 8002020:	0800209b 	.word	0x0800209b
 8002024:	0800209b 	.word	0x0800209b
 8002028:	0800209b 	.word	0x0800209b
 800202c:	0800209b 	.word	0x0800209b
 8002030:	08002049 	.word	0x08002049
 8002034:	0800205d 	.word	0x0800205d
 8002038:	4a79      	ldr	r2, [pc, #484]	; (8002220 <HAL_GPIO_Init+0x2b4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800203e:	e02c      	b.n	800209a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e029      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	3304      	adds	r3, #4
 800204e:	623b      	str	r3, [r7, #32]
          break;
 8002050:	e024      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	3308      	adds	r3, #8
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e01f      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	330c      	adds	r3, #12
 8002062:	623b      	str	r3, [r7, #32]
          break;
 8002064:	e01a      	b.n	800209c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800206e:	2304      	movs	r3, #4
 8002070:	623b      	str	r3, [r7, #32]
          break;
 8002072:	e013      	b.n	800209c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800207c:	2308      	movs	r3, #8
 800207e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	611a      	str	r2, [r3, #16]
          break;
 8002086:	e009      	b.n	800209c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002088:	2308      	movs	r3, #8
 800208a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	615a      	str	r2, [r3, #20]
          break;
 8002092:	e003      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
          break;
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x130>
          break;
 800209a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2bff      	cmp	r3, #255	; 0xff
 80020a0:	d801      	bhi.n	80020a6 <HAL_GPIO_Init+0x13a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	e001      	b.n	80020aa <HAL_GPIO_Init+0x13e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2bff      	cmp	r3, #255	; 0xff
 80020b0:	d802      	bhi.n	80020b8 <HAL_GPIO_Init+0x14c>
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	e002      	b.n	80020be <HAL_GPIO_Init+0x152>
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	3b08      	subs	r3, #8
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	210f      	movs	r1, #15
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	6a39      	ldr	r1, [r7, #32]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	431a      	orrs	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80b1 	beq.w	800224e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020ec:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <HAL_GPIO_Init+0x2b8>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a4c      	ldr	r2, [pc, #304]	; (8002224 <HAL_GPIO_Init+0x2b8>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_GPIO_Init+0x2b8>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002104:	4a48      	ldr	r2, [pc, #288]	; (8002228 <HAL_GPIO_Init+0x2bc>)
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002110:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a40      	ldr	r2, [pc, #256]	; (800222c <HAL_GPIO_Init+0x2c0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_GPIO_Init+0x1ec>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3f      	ldr	r2, [pc, #252]	; (8002230 <HAL_GPIO_Init+0x2c4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00d      	beq.n	8002154 <HAL_GPIO_Init+0x1e8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3e      	ldr	r2, [pc, #248]	; (8002234 <HAL_GPIO_Init+0x2c8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d007      	beq.n	8002150 <HAL_GPIO_Init+0x1e4>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3d      	ldr	r2, [pc, #244]	; (8002238 <HAL_GPIO_Init+0x2cc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_GPIO_Init+0x1e0>
 8002148:	2303      	movs	r3, #3
 800214a:	e006      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 800214c:	2304      	movs	r3, #4
 800214e:	e004      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 8002150:	2302      	movs	r3, #2
 8002152:	e002      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_GPIO_Init+0x1ee>
 8002158:	2300      	movs	r3, #0
 800215a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215c:	f002 0203 	and.w	r2, r2, #3
 8002160:	0092      	lsls	r2, r2, #2
 8002162:	4093      	lsls	r3, r2
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800216a:	492f      	ldr	r1, [pc, #188]	; (8002228 <HAL_GPIO_Init+0x2bc>)
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_GPIO_Init+0x2d0>)
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	492c      	ldr	r1, [pc, #176]	; (800223c <HAL_GPIO_Init+0x2d0>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002192:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_GPIO_Init+0x2d0>)
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	43db      	mvns	r3, r3
 800219a:	4928      	ldr	r1, [pc, #160]	; (800223c <HAL_GPIO_Init+0x2d0>)
 800219c:	4013      	ands	r3, r2
 800219e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	4922      	ldr	r1, [pc, #136]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60cb      	str	r3, [r1, #12]
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	491e      	ldr	r1, [pc, #120]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	4918      	ldr	r1, [pc, #96]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	4914      	ldr	r1, [pc, #80]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d021      	beq.n	8002240 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_GPIO_Init+0x2d0>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	490e      	ldr	r1, [pc, #56]	; (800223c <HAL_GPIO_Init+0x2d0>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]
 8002208:	e021      	b.n	800224e <HAL_GPIO_Init+0x2e2>
 800220a:	bf00      	nop
 800220c:	10320000 	.word	0x10320000
 8002210:	10310000 	.word	0x10310000
 8002214:	10220000 	.word	0x10220000
 8002218:	10210000 	.word	0x10210000
 800221c:	10120000 	.word	0x10120000
 8002220:	10110000 	.word	0x10110000
 8002224:	40021000 	.word	0x40021000
 8002228:	40010000 	.word	0x40010000
 800222c:	40010800 	.word	0x40010800
 8002230:	40010c00 	.word	0x40010c00
 8002234:	40011000 	.word	0x40011000
 8002238:	40011400 	.word	0x40011400
 800223c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	43db      	mvns	r3, r3
 8002248:	4909      	ldr	r1, [pc, #36]	; (8002270 <HAL_GPIO_Init+0x304>)
 800224a:	4013      	ands	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	3301      	adds	r3, #1
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	f47f ae8e 	bne.w	8001f80 <HAL_GPIO_Init+0x14>
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	372c      	adds	r7, #44	; 0x2c
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	e001      	b.n	8002296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b2:	787b      	ldrb	r3, [r7, #1]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b8:	887a      	ldrh	r2, [r7, #2]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022be:	e003      	b.n	80022c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	041a      	lsls	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b085      	sub	sp, #20
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e4:	887a      	ldrh	r2, [r7, #2]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4013      	ands	r3, r2
 80022ea:	041a      	lsls	r2, r3, #16
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	400b      	ands	r3, r1
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	611a      	str	r2, [r3, #16]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e272      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8087 	beq.w	8002432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002324:	4b92      	ldr	r3, [pc, #584]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b04      	cmp	r3, #4
 800232e:	d00c      	beq.n	800234a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002330:	4b8f      	ldr	r3, [pc, #572]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d112      	bne.n	8002362 <HAL_RCC_OscConfig+0x5e>
 800233c:	4b8c      	ldr	r3, [pc, #560]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d10b      	bne.n	8002362 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234a:	4b89      	ldr	r3, [pc, #548]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d06c      	beq.n	8002430 <HAL_RCC_OscConfig+0x12c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d168      	bne.n	8002430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e24c      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x76>
 800236c:	4b80      	ldr	r3, [pc, #512]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a7f      	ldr	r2, [pc, #508]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	e02e      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x98>
 8002382:	4b7b      	ldr	r3, [pc, #492]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7a      	ldr	r2, [pc, #488]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b78      	ldr	r3, [pc, #480]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a77      	ldr	r2, [pc, #476]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0xbc>
 80023a6:	4b72      	ldr	r3, [pc, #456]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a71      	ldr	r2, [pc, #452]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 80023c0:	4b6b      	ldr	r3, [pc, #428]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6a      	ldr	r2, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a67      	ldr	r2, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff f98c 	bl	80016fc <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff f988 	bl	80016fc <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e200      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0xe4>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff f978 	bl	80016fc <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff f974 	bl	80016fc <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1ec      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x10c>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d063      	beq.n	8002506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800243e:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_OscConfig+0x18c>
 8002456:	4b46      	ldr	r3, [pc, #280]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	4b43      	ldr	r3, [pc, #268]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x176>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1c0      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4939      	ldr	r1, [pc, #228]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	e03a      	b.n	8002506 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7ff f92d 	bl	80016fc <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7ff f929 	bl	80016fc <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1a1      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4927      	ldr	r1, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff f90c 	bl	80016fc <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e8:	f7ff f908 	bl	80016fc <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e180      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d03a      	beq.n	8002588 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d019      	beq.n	800254e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <HAL_RCC_OscConfig+0x274>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002520:	f7ff f8ec 	bl	80016fc <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7ff f8e8 	bl	80016fc <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e160      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002546:	2001      	movs	r0, #1
 8002548:	f000 face 	bl	8002ae8 <RCC_Delay>
 800254c:	e01c      	b.n	8002588 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_OscConfig+0x274>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002554:	f7ff f8d2 	bl	80016fc <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255a:	e00f      	b.n	800257c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255c:	f7ff f8ce 	bl	80016fc <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d908      	bls.n	800257c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e146      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	42420000 	.word	0x42420000
 8002578:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	4b92      	ldr	r3, [pc, #584]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e9      	bne.n	800255c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a6 	beq.w	80026e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259a:	4b8b      	ldr	r3, [pc, #556]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4a87      	ldr	r2, [pc, #540]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	61d3      	str	r3, [r2, #28]
 80025b2:	4b85      	ldr	r3, [pc, #532]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b82      	ldr	r3, [pc, #520]	; (80027cc <HAL_RCC_OscConfig+0x4c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d118      	bne.n	8002600 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0x4c8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a7e      	ldr	r2, [pc, #504]	; (80027cc <HAL_RCC_OscConfig+0x4c8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7ff f88f 	bl	80016fc <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e2:	f7ff f88b 	bl	80016fc <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b64      	cmp	r3, #100	; 0x64
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e103      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	4b75      	ldr	r3, [pc, #468]	; (80027cc <HAL_RCC_OscConfig+0x4c8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x312>
 8002608:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a6e      	ldr	r2, [pc, #440]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e02d      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x334>
 800261e:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a69      	ldr	r2, [pc, #420]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6213      	str	r3, [r2, #32]
 800262a:	4b67      	ldr	r3, [pc, #412]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a66      	ldr	r2, [pc, #408]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	e01c      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d10c      	bne.n	800265a <HAL_RCC_OscConfig+0x356>
 8002640:	4b61      	ldr	r3, [pc, #388]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a60      	ldr	r2, [pc, #384]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	4b5e      	ldr	r3, [pc, #376]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	e00b      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 800265a:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a5a      	ldr	r2, [pc, #360]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	4b58      	ldr	r3, [pc, #352]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a57      	ldr	r2, [pc, #348]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d015      	beq.n	80026a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7ff f83f 	bl	80016fc <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7ff f83b 	bl	80016fc <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0b1      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ee      	beq.n	8002682 <HAL_RCC_OscConfig+0x37e>
 80026a4:	e014      	b.n	80026d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7ff f829 	bl	80016fc <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7ff f825 	bl	80016fc <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e09b      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	4b40      	ldr	r3, [pc, #256]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ee      	bne.n	80026ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d6:	4b3c      	ldr	r3, [pc, #240]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a3b      	ldr	r2, [pc, #236]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8087 	beq.w	80027fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d061      	beq.n	80027bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d146      	bne.n	800278e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_RCC_OscConfig+0x4cc>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe fff9 	bl	80016fc <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7fe fff5 	bl	80016fc <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e06d      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002720:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002734:	d108      	bne.n	8002748 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4921      	ldr	r1, [pc, #132]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002748:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a19      	ldr	r1, [r3, #32]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	430b      	orrs	r3, r1
 800275a:	491b      	ldr	r1, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x4cc>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe ffc9 	bl	80016fc <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe ffc5 	bl	80016fc <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e03d      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x46a>
 800278c:	e035      	b.n	80027fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_RCC_OscConfig+0x4cc>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe ffb2 	bl	80016fc <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe ffae 	bl	80016fc <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e026      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x498>
 80027ba:	e01e      	b.n	80027fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e019      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40007000 	.word	0x40007000
 80027d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x500>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0d0      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800281c:	4b6a      	ldr	r3, [pc, #424]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d910      	bls.n	800284c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b67      	ldr	r3, [pc, #412]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4965      	ldr	r1, [pc, #404]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b63      	ldr	r3, [pc, #396]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0b8      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a58      	ldr	r2, [pc, #352]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800286e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a52      	ldr	r2, [pc, #328]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	494d      	ldr	r1, [pc, #308]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d040      	beq.n	8002928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d115      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e07f      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	4b41      	ldr	r3, [pc, #260]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e073      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06b      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f023 0203 	bic.w	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4936      	ldr	r1, [pc, #216]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f8:	f7fe ff00 	bl	80016fc <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002900:	f7fe fefc 	bl	80016fc <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e053      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 020c 	and.w	r2, r3, #12
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	429a      	cmp	r2, r3
 8002926:	d1eb      	bne.n	8002900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d210      	bcs.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4922      	ldr	r1, [pc, #136]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e032      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4916      	ldr	r1, [pc, #88]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	490e      	ldr	r1, [pc, #56]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002996:	f000 f821 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 800299a:	4602      	mov	r2, r0
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	490a      	ldr	r1, [pc, #40]	; (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80029a8:	5ccb      	ldrb	r3, [r1, r3]
 80029aa:	fa22 f303 	lsr.w	r3, r2, r3
 80029ae:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x1cc>)
 80029b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_RCC_ClockConfig+0x1d0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fe5e 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40022000 	.word	0x40022000
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08003af0 	.word	0x08003af0
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000004 	.word	0x20000004

080029dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029f6:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x94>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d002      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x30>
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x36>
 8002a0a:	e027      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a0e:	613b      	str	r3, [r7, #16]
      break;
 8002a10:	e027      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	0c9b      	lsrs	r3, r3, #18
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a1c:	5cd3      	ldrb	r3, [r2, r3]
 8002a1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d010      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	0c5b      	lsrs	r3, r3, #17
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
 8002a38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a3e:	fb03 f202 	mul.w	r2, r3, r2
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e004      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	613b      	str	r3, [r7, #16]
      break;
 8002a5a:	e002      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a5e:	613b      	str	r3, [r7, #16]
      break;
 8002a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a62:	693b      	ldr	r3, [r7, #16]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	007a1200 	.word	0x007a1200
 8002a78:	08003b08 	.word	0x08003b08
 8002a7c:	08003b18 	.word	0x08003b18
 8002a80:	003d0900 	.word	0x003d0900

08002a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b02      	ldr	r3, [pc, #8]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	20000000 	.word	0x20000000

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a9c:	f7ff fff2 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4903      	ldr	r1, [pc, #12]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08003b00 	.word	0x08003b00

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac4:	f7ff ffde 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	0adb      	lsrs	r3, r3, #11
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	08003b00 	.word	0x08003b00

08002ae8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <RCC_Delay+0x34>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <RCC_Delay+0x38>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0a5b      	lsrs	r3, r3, #9
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b04:	bf00      	nop
  }
  while (Delay --);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e5a      	subs	r2, r3, #1
 8002b0a:	60fa      	str	r2, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f9      	bne.n	8002b04 <RCC_Delay+0x1c>
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	10624dd3 	.word	0x10624dd3

08002b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d07d      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b40:	2300      	movs	r3, #0
 8002b42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b44:	4b4f      	ldr	r3, [pc, #316]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b50:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	4a4b      	ldr	r2, [pc, #300]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	61d3      	str	r3, [r2, #28]
 8002b5c:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d118      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b78:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a42      	ldr	r2, [pc, #264]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b84:	f7fe fdba 	bl	80016fc <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	e008      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8c:	f7fe fdb6 	bl	80016fc <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e06d      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b3a      	ldr	r3, [pc, #232]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d02e      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d027      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd2:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd8:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bde:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d014      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7fe fd85 	bl	80016fc <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe fd81 	bl	80016fc <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e036      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ee      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c18:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4917      	ldr	r1, [pc, #92]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	490b      	ldr	r1, [pc, #44]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4904      	ldr	r1, [pc, #16]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42420440 	.word	0x42420440

08002c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e042      	b.n	8002d28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fe fbf2 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	; 0x24
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f91d 	bl	8002f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d16d      	bne.n	8002e2c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_UART_Transmit+0x2c>
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e066      	b.n	8002e2e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2221      	movs	r2, #33	; 0x21
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d6e:	f7fe fcc5 	bl	80016fc <HAL_GetTick>
 8002d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	88fa      	ldrh	r2, [r7, #6]
 8002d7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d108      	bne.n	8002d9c <HAL_UART_Transmit+0x6c>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e003      	b.n	8002da4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002da4:	e02a      	b.n	8002dfc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f840 	bl	8002e36 <UART_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e036      	b.n	8002e2e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	3302      	adds	r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	e007      	b.n	8002dee <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	3301      	adds	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1cf      	bne.n	8002da6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2140      	movs	r1, #64	; 0x40
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f810 	bl	8002e36 <UART_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e006      	b.n	8002e2e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b090      	sub	sp, #64	; 0x40
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e46:	e050      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d04c      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e56:	f7fe fc51 	bl	80016fc <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d241      	bcs.n	8002eea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e86:	637a      	str	r2, [r7, #52]	; 0x34
 8002e88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e8e:	e841 2300 	strex	r3, r2, [r1]
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1e5      	bne.n	8002e66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3314      	adds	r3, #20
 8002ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	e853 3f00 	ldrex	r3, [r3]
 8002ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eba:	623a      	str	r2, [r7, #32]
 8002ebc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	69f9      	ldr	r1, [r7, #28]
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e5      	bne.n	8002e9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e00f      	b.n	8002f0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d09f      	beq.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3740      	adds	r7, #64	; 0x40
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f4e:	f023 030c 	bic.w	r3, r3, #12
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <UART_SetConfig+0x114>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d103      	bne.n	8002f84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7ff fda0 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	e002      	b.n	8002f8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f84:	f7ff fd88 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 8002f88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009a      	lsls	r2, r3, #2
 8002f94:	441a      	add	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <UART_SetConfig+0x118>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	0119      	lsls	r1, r3, #4
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009a      	lsls	r2, r3, #2
 8002fb4:	441a      	add	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <UART_SetConfig+0x118>)
 8002fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2064      	movs	r0, #100	; 0x64
 8002fca:	fb00 f303 	mul.w	r3, r0, r3
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	3332      	adds	r3, #50	; 0x32
 8002fd4:	4a15      	ldr	r2, [pc, #84]	; (800302c <UART_SetConfig+0x118>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe0:	4419      	add	r1, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	009a      	lsls	r2, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <UART_SetConfig+0x118>)
 8002ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2064      	movs	r0, #100	; 0x64
 8003002:	fb00 f303 	mul.w	r3, r0, r3
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	3332      	adds	r3, #50	; 0x32
 800300c:	4a07      	ldr	r2, [pc, #28]	; (800302c <UART_SetConfig+0x118>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	f003 020f 	and.w	r2, r3, #15
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	440a      	add	r2, r1
 800301e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40013800 	.word	0x40013800
 800302c:	51eb851f 	.word	0x51eb851f

08003030 <siprintf>:
 8003030:	b40e      	push	{r1, r2, r3}
 8003032:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003036:	b500      	push	{lr}
 8003038:	b09c      	sub	sp, #112	; 0x70
 800303a:	ab1d      	add	r3, sp, #116	; 0x74
 800303c:	9002      	str	r0, [sp, #8]
 800303e:	9006      	str	r0, [sp, #24]
 8003040:	9107      	str	r1, [sp, #28]
 8003042:	9104      	str	r1, [sp, #16]
 8003044:	4808      	ldr	r0, [pc, #32]	; (8003068 <siprintf+0x38>)
 8003046:	4909      	ldr	r1, [pc, #36]	; (800306c <siprintf+0x3c>)
 8003048:	f853 2b04 	ldr.w	r2, [r3], #4
 800304c:	9105      	str	r1, [sp, #20]
 800304e:	6800      	ldr	r0, [r0, #0]
 8003050:	a902      	add	r1, sp, #8
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	f000 f99e 	bl	8003394 <_svfiprintf_r>
 8003058:	2200      	movs	r2, #0
 800305a:	9b02      	ldr	r3, [sp, #8]
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	b01c      	add	sp, #112	; 0x70
 8003060:	f85d eb04 	ldr.w	lr, [sp], #4
 8003064:	b003      	add	sp, #12
 8003066:	4770      	bx	lr
 8003068:	20000058 	.word	0x20000058
 800306c:	ffff0208 	.word	0xffff0208

08003070 <memset>:
 8003070:	4603      	mov	r3, r0
 8003072:	4402      	add	r2, r0
 8003074:	4293      	cmp	r3, r2
 8003076:	d100      	bne.n	800307a <memset+0xa>
 8003078:	4770      	bx	lr
 800307a:	f803 1b01 	strb.w	r1, [r3], #1
 800307e:	e7f9      	b.n	8003074 <memset+0x4>

08003080 <strcat>:
 8003080:	4602      	mov	r2, r0
 8003082:	b510      	push	{r4, lr}
 8003084:	7814      	ldrb	r4, [r2, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	3201      	adds	r2, #1
 800308a:	2c00      	cmp	r4, #0
 800308c:	d1fa      	bne.n	8003084 <strcat+0x4>
 800308e:	3b01      	subs	r3, #1
 8003090:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003094:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003098:	2a00      	cmp	r2, #0
 800309a:	d1f9      	bne.n	8003090 <strcat+0x10>
 800309c:	bd10      	pop	{r4, pc}
	...

080030a0 <__errno>:
 80030a0:	4b01      	ldr	r3, [pc, #4]	; (80030a8 <__errno+0x8>)
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000058 	.word	0x20000058

080030ac <__libc_init_array>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	2600      	movs	r6, #0
 80030b0:	4d0c      	ldr	r5, [pc, #48]	; (80030e4 <__libc_init_array+0x38>)
 80030b2:	4c0d      	ldr	r4, [pc, #52]	; (80030e8 <__libc_init_array+0x3c>)
 80030b4:	1b64      	subs	r4, r4, r5
 80030b6:	10a4      	asrs	r4, r4, #2
 80030b8:	42a6      	cmp	r6, r4
 80030ba:	d109      	bne.n	80030d0 <__libc_init_array+0x24>
 80030bc:	f000 fc7a 	bl	80039b4 <_init>
 80030c0:	2600      	movs	r6, #0
 80030c2:	4d0a      	ldr	r5, [pc, #40]	; (80030ec <__libc_init_array+0x40>)
 80030c4:	4c0a      	ldr	r4, [pc, #40]	; (80030f0 <__libc_init_array+0x44>)
 80030c6:	1b64      	subs	r4, r4, r5
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	42a6      	cmp	r6, r4
 80030cc:	d105      	bne.n	80030da <__libc_init_array+0x2e>
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d4:	4798      	blx	r3
 80030d6:	3601      	adds	r6, #1
 80030d8:	e7ee      	b.n	80030b8 <__libc_init_array+0xc>
 80030da:	f855 3b04 	ldr.w	r3, [r5], #4
 80030de:	4798      	blx	r3
 80030e0:	3601      	adds	r6, #1
 80030e2:	e7f2      	b.n	80030ca <__libc_init_array+0x1e>
 80030e4:	08003b50 	.word	0x08003b50
 80030e8:	08003b50 	.word	0x08003b50
 80030ec:	08003b50 	.word	0x08003b50
 80030f0:	08003b54 	.word	0x08003b54

080030f4 <__retarget_lock_acquire_recursive>:
 80030f4:	4770      	bx	lr

080030f6 <__retarget_lock_release_recursive>:
 80030f6:	4770      	bx	lr

080030f8 <_free_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4605      	mov	r5, r0
 80030fc:	2900      	cmp	r1, #0
 80030fe:	d040      	beq.n	8003182 <_free_r+0x8a>
 8003100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003104:	1f0c      	subs	r4, r1, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	bfb8      	it	lt
 800310a:	18e4      	addlt	r4, r4, r3
 800310c:	f000 f8dc 	bl	80032c8 <__malloc_lock>
 8003110:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <_free_r+0x8c>)
 8003112:	6813      	ldr	r3, [r2, #0]
 8003114:	b933      	cbnz	r3, 8003124 <_free_r+0x2c>
 8003116:	6063      	str	r3, [r4, #4]
 8003118:	6014      	str	r4, [r2, #0]
 800311a:	4628      	mov	r0, r5
 800311c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003120:	f000 b8d8 	b.w	80032d4 <__malloc_unlock>
 8003124:	42a3      	cmp	r3, r4
 8003126:	d908      	bls.n	800313a <_free_r+0x42>
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	1821      	adds	r1, r4, r0
 800312c:	428b      	cmp	r3, r1
 800312e:	bf01      	itttt	eq
 8003130:	6819      	ldreq	r1, [r3, #0]
 8003132:	685b      	ldreq	r3, [r3, #4]
 8003134:	1809      	addeq	r1, r1, r0
 8003136:	6021      	streq	r1, [r4, #0]
 8003138:	e7ed      	b.n	8003116 <_free_r+0x1e>
 800313a:	461a      	mov	r2, r3
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	b10b      	cbz	r3, 8003144 <_free_r+0x4c>
 8003140:	42a3      	cmp	r3, r4
 8003142:	d9fa      	bls.n	800313a <_free_r+0x42>
 8003144:	6811      	ldr	r1, [r2, #0]
 8003146:	1850      	adds	r0, r2, r1
 8003148:	42a0      	cmp	r0, r4
 800314a:	d10b      	bne.n	8003164 <_free_r+0x6c>
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	4401      	add	r1, r0
 8003150:	1850      	adds	r0, r2, r1
 8003152:	4283      	cmp	r3, r0
 8003154:	6011      	str	r1, [r2, #0]
 8003156:	d1e0      	bne.n	800311a <_free_r+0x22>
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4408      	add	r0, r1
 800315e:	6010      	str	r0, [r2, #0]
 8003160:	6053      	str	r3, [r2, #4]
 8003162:	e7da      	b.n	800311a <_free_r+0x22>
 8003164:	d902      	bls.n	800316c <_free_r+0x74>
 8003166:	230c      	movs	r3, #12
 8003168:	602b      	str	r3, [r5, #0]
 800316a:	e7d6      	b.n	800311a <_free_r+0x22>
 800316c:	6820      	ldr	r0, [r4, #0]
 800316e:	1821      	adds	r1, r4, r0
 8003170:	428b      	cmp	r3, r1
 8003172:	bf01      	itttt	eq
 8003174:	6819      	ldreq	r1, [r3, #0]
 8003176:	685b      	ldreq	r3, [r3, #4]
 8003178:	1809      	addeq	r1, r1, r0
 800317a:	6021      	streq	r1, [r4, #0]
 800317c:	6063      	str	r3, [r4, #4]
 800317e:	6054      	str	r4, [r2, #4]
 8003180:	e7cb      	b.n	800311a <_free_r+0x22>
 8003182:	bd38      	pop	{r3, r4, r5, pc}
 8003184:	20000590 	.word	0x20000590

08003188 <sbrk_aligned>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	4e0e      	ldr	r6, [pc, #56]	; (80031c4 <sbrk_aligned+0x3c>)
 800318c:	460c      	mov	r4, r1
 800318e:	6831      	ldr	r1, [r6, #0]
 8003190:	4605      	mov	r5, r0
 8003192:	b911      	cbnz	r1, 800319a <sbrk_aligned+0x12>
 8003194:	f000 fbaa 	bl	80038ec <_sbrk_r>
 8003198:	6030      	str	r0, [r6, #0]
 800319a:	4621      	mov	r1, r4
 800319c:	4628      	mov	r0, r5
 800319e:	f000 fba5 	bl	80038ec <_sbrk_r>
 80031a2:	1c43      	adds	r3, r0, #1
 80031a4:	d00a      	beq.n	80031bc <sbrk_aligned+0x34>
 80031a6:	1cc4      	adds	r4, r0, #3
 80031a8:	f024 0403 	bic.w	r4, r4, #3
 80031ac:	42a0      	cmp	r0, r4
 80031ae:	d007      	beq.n	80031c0 <sbrk_aligned+0x38>
 80031b0:	1a21      	subs	r1, r4, r0
 80031b2:	4628      	mov	r0, r5
 80031b4:	f000 fb9a 	bl	80038ec <_sbrk_r>
 80031b8:	3001      	adds	r0, #1
 80031ba:	d101      	bne.n	80031c0 <sbrk_aligned+0x38>
 80031bc:	f04f 34ff 	mov.w	r4, #4294967295
 80031c0:	4620      	mov	r0, r4
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	20000594 	.word	0x20000594

080031c8 <_malloc_r>:
 80031c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031cc:	1ccd      	adds	r5, r1, #3
 80031ce:	f025 0503 	bic.w	r5, r5, #3
 80031d2:	3508      	adds	r5, #8
 80031d4:	2d0c      	cmp	r5, #12
 80031d6:	bf38      	it	cc
 80031d8:	250c      	movcc	r5, #12
 80031da:	2d00      	cmp	r5, #0
 80031dc:	4607      	mov	r7, r0
 80031de:	db01      	blt.n	80031e4 <_malloc_r+0x1c>
 80031e0:	42a9      	cmp	r1, r5
 80031e2:	d905      	bls.n	80031f0 <_malloc_r+0x28>
 80031e4:	230c      	movs	r3, #12
 80031e6:	2600      	movs	r6, #0
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	4630      	mov	r0, r6
 80031ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80032c4 <_malloc_r+0xfc>
 80031f4:	f000 f868 	bl	80032c8 <__malloc_lock>
 80031f8:	f8d8 3000 	ldr.w	r3, [r8]
 80031fc:	461c      	mov	r4, r3
 80031fe:	bb5c      	cbnz	r4, 8003258 <_malloc_r+0x90>
 8003200:	4629      	mov	r1, r5
 8003202:	4638      	mov	r0, r7
 8003204:	f7ff ffc0 	bl	8003188 <sbrk_aligned>
 8003208:	1c43      	adds	r3, r0, #1
 800320a:	4604      	mov	r4, r0
 800320c:	d155      	bne.n	80032ba <_malloc_r+0xf2>
 800320e:	f8d8 4000 	ldr.w	r4, [r8]
 8003212:	4626      	mov	r6, r4
 8003214:	2e00      	cmp	r6, #0
 8003216:	d145      	bne.n	80032a4 <_malloc_r+0xdc>
 8003218:	2c00      	cmp	r4, #0
 800321a:	d048      	beq.n	80032ae <_malloc_r+0xe6>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	4631      	mov	r1, r6
 8003220:	4638      	mov	r0, r7
 8003222:	eb04 0903 	add.w	r9, r4, r3
 8003226:	f000 fb61 	bl	80038ec <_sbrk_r>
 800322a:	4581      	cmp	r9, r0
 800322c:	d13f      	bne.n	80032ae <_malloc_r+0xe6>
 800322e:	6821      	ldr	r1, [r4, #0]
 8003230:	4638      	mov	r0, r7
 8003232:	1a6d      	subs	r5, r5, r1
 8003234:	4629      	mov	r1, r5
 8003236:	f7ff ffa7 	bl	8003188 <sbrk_aligned>
 800323a:	3001      	adds	r0, #1
 800323c:	d037      	beq.n	80032ae <_malloc_r+0xe6>
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	442b      	add	r3, r5
 8003242:	6023      	str	r3, [r4, #0]
 8003244:	f8d8 3000 	ldr.w	r3, [r8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d038      	beq.n	80032be <_malloc_r+0xf6>
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	42a2      	cmp	r2, r4
 8003250:	d12b      	bne.n	80032aa <_malloc_r+0xe2>
 8003252:	2200      	movs	r2, #0
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	e00f      	b.n	8003278 <_malloc_r+0xb0>
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	1b52      	subs	r2, r2, r5
 800325c:	d41f      	bmi.n	800329e <_malloc_r+0xd6>
 800325e:	2a0b      	cmp	r2, #11
 8003260:	d917      	bls.n	8003292 <_malloc_r+0xca>
 8003262:	1961      	adds	r1, r4, r5
 8003264:	42a3      	cmp	r3, r4
 8003266:	6025      	str	r5, [r4, #0]
 8003268:	bf18      	it	ne
 800326a:	6059      	strne	r1, [r3, #4]
 800326c:	6863      	ldr	r3, [r4, #4]
 800326e:	bf08      	it	eq
 8003270:	f8c8 1000 	streq.w	r1, [r8]
 8003274:	5162      	str	r2, [r4, r5]
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	4638      	mov	r0, r7
 800327a:	f104 060b 	add.w	r6, r4, #11
 800327e:	f000 f829 	bl	80032d4 <__malloc_unlock>
 8003282:	f026 0607 	bic.w	r6, r6, #7
 8003286:	1d23      	adds	r3, r4, #4
 8003288:	1af2      	subs	r2, r6, r3
 800328a:	d0ae      	beq.n	80031ea <_malloc_r+0x22>
 800328c:	1b9b      	subs	r3, r3, r6
 800328e:	50a3      	str	r3, [r4, r2]
 8003290:	e7ab      	b.n	80031ea <_malloc_r+0x22>
 8003292:	42a3      	cmp	r3, r4
 8003294:	6862      	ldr	r2, [r4, #4]
 8003296:	d1dd      	bne.n	8003254 <_malloc_r+0x8c>
 8003298:	f8c8 2000 	str.w	r2, [r8]
 800329c:	e7ec      	b.n	8003278 <_malloc_r+0xb0>
 800329e:	4623      	mov	r3, r4
 80032a0:	6864      	ldr	r4, [r4, #4]
 80032a2:	e7ac      	b.n	80031fe <_malloc_r+0x36>
 80032a4:	4634      	mov	r4, r6
 80032a6:	6876      	ldr	r6, [r6, #4]
 80032a8:	e7b4      	b.n	8003214 <_malloc_r+0x4c>
 80032aa:	4613      	mov	r3, r2
 80032ac:	e7cc      	b.n	8003248 <_malloc_r+0x80>
 80032ae:	230c      	movs	r3, #12
 80032b0:	4638      	mov	r0, r7
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	f000 f80e 	bl	80032d4 <__malloc_unlock>
 80032b8:	e797      	b.n	80031ea <_malloc_r+0x22>
 80032ba:	6025      	str	r5, [r4, #0]
 80032bc:	e7dc      	b.n	8003278 <_malloc_r+0xb0>
 80032be:	605b      	str	r3, [r3, #4]
 80032c0:	deff      	udf	#255	; 0xff
 80032c2:	bf00      	nop
 80032c4:	20000590 	.word	0x20000590

080032c8 <__malloc_lock>:
 80032c8:	4801      	ldr	r0, [pc, #4]	; (80032d0 <__malloc_lock+0x8>)
 80032ca:	f7ff bf13 	b.w	80030f4 <__retarget_lock_acquire_recursive>
 80032ce:	bf00      	nop
 80032d0:	2000058c 	.word	0x2000058c

080032d4 <__malloc_unlock>:
 80032d4:	4801      	ldr	r0, [pc, #4]	; (80032dc <__malloc_unlock+0x8>)
 80032d6:	f7ff bf0e 	b.w	80030f6 <__retarget_lock_release_recursive>
 80032da:	bf00      	nop
 80032dc:	2000058c 	.word	0x2000058c

080032e0 <__ssputs_r>:
 80032e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e4:	461f      	mov	r7, r3
 80032e6:	688e      	ldr	r6, [r1, #8]
 80032e8:	4682      	mov	sl, r0
 80032ea:	42be      	cmp	r6, r7
 80032ec:	460c      	mov	r4, r1
 80032ee:	4690      	mov	r8, r2
 80032f0:	680b      	ldr	r3, [r1, #0]
 80032f2:	d82c      	bhi.n	800334e <__ssputs_r+0x6e>
 80032f4:	898a      	ldrh	r2, [r1, #12]
 80032f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032fa:	d026      	beq.n	800334a <__ssputs_r+0x6a>
 80032fc:	6965      	ldr	r5, [r4, #20]
 80032fe:	6909      	ldr	r1, [r1, #16]
 8003300:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003304:	eba3 0901 	sub.w	r9, r3, r1
 8003308:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800330c:	1c7b      	adds	r3, r7, #1
 800330e:	444b      	add	r3, r9
 8003310:	106d      	asrs	r5, r5, #1
 8003312:	429d      	cmp	r5, r3
 8003314:	bf38      	it	cc
 8003316:	461d      	movcc	r5, r3
 8003318:	0553      	lsls	r3, r2, #21
 800331a:	d527      	bpl.n	800336c <__ssputs_r+0x8c>
 800331c:	4629      	mov	r1, r5
 800331e:	f7ff ff53 	bl	80031c8 <_malloc_r>
 8003322:	4606      	mov	r6, r0
 8003324:	b360      	cbz	r0, 8003380 <__ssputs_r+0xa0>
 8003326:	464a      	mov	r2, r9
 8003328:	6921      	ldr	r1, [r4, #16]
 800332a:	f000 fafd 	bl	8003928 <memcpy>
 800332e:	89a3      	ldrh	r3, [r4, #12]
 8003330:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003338:	81a3      	strh	r3, [r4, #12]
 800333a:	6126      	str	r6, [r4, #16]
 800333c:	444e      	add	r6, r9
 800333e:	6026      	str	r6, [r4, #0]
 8003340:	463e      	mov	r6, r7
 8003342:	6165      	str	r5, [r4, #20]
 8003344:	eba5 0509 	sub.w	r5, r5, r9
 8003348:	60a5      	str	r5, [r4, #8]
 800334a:	42be      	cmp	r6, r7
 800334c:	d900      	bls.n	8003350 <__ssputs_r+0x70>
 800334e:	463e      	mov	r6, r7
 8003350:	4632      	mov	r2, r6
 8003352:	4641      	mov	r1, r8
 8003354:	6820      	ldr	r0, [r4, #0]
 8003356:	f000 faaf 	bl	80038b8 <memmove>
 800335a:	2000      	movs	r0, #0
 800335c:	68a3      	ldr	r3, [r4, #8]
 800335e:	1b9b      	subs	r3, r3, r6
 8003360:	60a3      	str	r3, [r4, #8]
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	4433      	add	r3, r6
 8003366:	6023      	str	r3, [r4, #0]
 8003368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800336c:	462a      	mov	r2, r5
 800336e:	f000 fae9 	bl	8003944 <_realloc_r>
 8003372:	4606      	mov	r6, r0
 8003374:	2800      	cmp	r0, #0
 8003376:	d1e0      	bne.n	800333a <__ssputs_r+0x5a>
 8003378:	4650      	mov	r0, sl
 800337a:	6921      	ldr	r1, [r4, #16]
 800337c:	f7ff febc 	bl	80030f8 <_free_r>
 8003380:	230c      	movs	r3, #12
 8003382:	f8ca 3000 	str.w	r3, [sl]
 8003386:	89a3      	ldrh	r3, [r4, #12]
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003390:	81a3      	strh	r3, [r4, #12]
 8003392:	e7e9      	b.n	8003368 <__ssputs_r+0x88>

08003394 <_svfiprintf_r>:
 8003394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003398:	4698      	mov	r8, r3
 800339a:	898b      	ldrh	r3, [r1, #12]
 800339c:	4607      	mov	r7, r0
 800339e:	061b      	lsls	r3, r3, #24
 80033a0:	460d      	mov	r5, r1
 80033a2:	4614      	mov	r4, r2
 80033a4:	b09d      	sub	sp, #116	; 0x74
 80033a6:	d50e      	bpl.n	80033c6 <_svfiprintf_r+0x32>
 80033a8:	690b      	ldr	r3, [r1, #16]
 80033aa:	b963      	cbnz	r3, 80033c6 <_svfiprintf_r+0x32>
 80033ac:	2140      	movs	r1, #64	; 0x40
 80033ae:	f7ff ff0b 	bl	80031c8 <_malloc_r>
 80033b2:	6028      	str	r0, [r5, #0]
 80033b4:	6128      	str	r0, [r5, #16]
 80033b6:	b920      	cbnz	r0, 80033c2 <_svfiprintf_r+0x2e>
 80033b8:	230c      	movs	r3, #12
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295
 80033c0:	e0d0      	b.n	8003564 <_svfiprintf_r+0x1d0>
 80033c2:	2340      	movs	r3, #64	; 0x40
 80033c4:	616b      	str	r3, [r5, #20]
 80033c6:	2300      	movs	r3, #0
 80033c8:	9309      	str	r3, [sp, #36]	; 0x24
 80033ca:	2320      	movs	r3, #32
 80033cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033d0:	2330      	movs	r3, #48	; 0x30
 80033d2:	f04f 0901 	mov.w	r9, #1
 80033d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80033da:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800357c <_svfiprintf_r+0x1e8>
 80033de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033e2:	4623      	mov	r3, r4
 80033e4:	469a      	mov	sl, r3
 80033e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033ea:	b10a      	cbz	r2, 80033f0 <_svfiprintf_r+0x5c>
 80033ec:	2a25      	cmp	r2, #37	; 0x25
 80033ee:	d1f9      	bne.n	80033e4 <_svfiprintf_r+0x50>
 80033f0:	ebba 0b04 	subs.w	fp, sl, r4
 80033f4:	d00b      	beq.n	800340e <_svfiprintf_r+0x7a>
 80033f6:	465b      	mov	r3, fp
 80033f8:	4622      	mov	r2, r4
 80033fa:	4629      	mov	r1, r5
 80033fc:	4638      	mov	r0, r7
 80033fe:	f7ff ff6f 	bl	80032e0 <__ssputs_r>
 8003402:	3001      	adds	r0, #1
 8003404:	f000 80a9 	beq.w	800355a <_svfiprintf_r+0x1c6>
 8003408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800340a:	445a      	add	r2, fp
 800340c:	9209      	str	r2, [sp, #36]	; 0x24
 800340e:	f89a 3000 	ldrb.w	r3, [sl]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80a1 	beq.w	800355a <_svfiprintf_r+0x1c6>
 8003418:	2300      	movs	r3, #0
 800341a:	f04f 32ff 	mov.w	r2, #4294967295
 800341e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003422:	f10a 0a01 	add.w	sl, sl, #1
 8003426:	9304      	str	r3, [sp, #16]
 8003428:	9307      	str	r3, [sp, #28]
 800342a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800342e:	931a      	str	r3, [sp, #104]	; 0x68
 8003430:	4654      	mov	r4, sl
 8003432:	2205      	movs	r2, #5
 8003434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003438:	4850      	ldr	r0, [pc, #320]	; (800357c <_svfiprintf_r+0x1e8>)
 800343a:	f000 fa67 	bl	800390c <memchr>
 800343e:	9a04      	ldr	r2, [sp, #16]
 8003440:	b9d8      	cbnz	r0, 800347a <_svfiprintf_r+0xe6>
 8003442:	06d0      	lsls	r0, r2, #27
 8003444:	bf44      	itt	mi
 8003446:	2320      	movmi	r3, #32
 8003448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800344c:	0711      	lsls	r1, r2, #28
 800344e:	bf44      	itt	mi
 8003450:	232b      	movmi	r3, #43	; 0x2b
 8003452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003456:	f89a 3000 	ldrb.w	r3, [sl]
 800345a:	2b2a      	cmp	r3, #42	; 0x2a
 800345c:	d015      	beq.n	800348a <_svfiprintf_r+0xf6>
 800345e:	4654      	mov	r4, sl
 8003460:	2000      	movs	r0, #0
 8003462:	f04f 0c0a 	mov.w	ip, #10
 8003466:	9a07      	ldr	r2, [sp, #28]
 8003468:	4621      	mov	r1, r4
 800346a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800346e:	3b30      	subs	r3, #48	; 0x30
 8003470:	2b09      	cmp	r3, #9
 8003472:	d94d      	bls.n	8003510 <_svfiprintf_r+0x17c>
 8003474:	b1b0      	cbz	r0, 80034a4 <_svfiprintf_r+0x110>
 8003476:	9207      	str	r2, [sp, #28]
 8003478:	e014      	b.n	80034a4 <_svfiprintf_r+0x110>
 800347a:	eba0 0308 	sub.w	r3, r0, r8
 800347e:	fa09 f303 	lsl.w	r3, r9, r3
 8003482:	4313      	orrs	r3, r2
 8003484:	46a2      	mov	sl, r4
 8003486:	9304      	str	r3, [sp, #16]
 8003488:	e7d2      	b.n	8003430 <_svfiprintf_r+0x9c>
 800348a:	9b03      	ldr	r3, [sp, #12]
 800348c:	1d19      	adds	r1, r3, #4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	9103      	str	r1, [sp, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	bfbb      	ittet	lt
 8003496:	425b      	neglt	r3, r3
 8003498:	f042 0202 	orrlt.w	r2, r2, #2
 800349c:	9307      	strge	r3, [sp, #28]
 800349e:	9307      	strlt	r3, [sp, #28]
 80034a0:	bfb8      	it	lt
 80034a2:	9204      	strlt	r2, [sp, #16]
 80034a4:	7823      	ldrb	r3, [r4, #0]
 80034a6:	2b2e      	cmp	r3, #46	; 0x2e
 80034a8:	d10c      	bne.n	80034c4 <_svfiprintf_r+0x130>
 80034aa:	7863      	ldrb	r3, [r4, #1]
 80034ac:	2b2a      	cmp	r3, #42	; 0x2a
 80034ae:	d134      	bne.n	800351a <_svfiprintf_r+0x186>
 80034b0:	9b03      	ldr	r3, [sp, #12]
 80034b2:	3402      	adds	r4, #2
 80034b4:	1d1a      	adds	r2, r3, #4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	9203      	str	r2, [sp, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bfb8      	it	lt
 80034be:	f04f 33ff 	movlt.w	r3, #4294967295
 80034c2:	9305      	str	r3, [sp, #20]
 80034c4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003580 <_svfiprintf_r+0x1ec>
 80034c8:	2203      	movs	r2, #3
 80034ca:	4650      	mov	r0, sl
 80034cc:	7821      	ldrb	r1, [r4, #0]
 80034ce:	f000 fa1d 	bl	800390c <memchr>
 80034d2:	b138      	cbz	r0, 80034e4 <_svfiprintf_r+0x150>
 80034d4:	2240      	movs	r2, #64	; 0x40
 80034d6:	9b04      	ldr	r3, [sp, #16]
 80034d8:	eba0 000a 	sub.w	r0, r0, sl
 80034dc:	4082      	lsls	r2, r0
 80034de:	4313      	orrs	r3, r2
 80034e0:	3401      	adds	r4, #1
 80034e2:	9304      	str	r3, [sp, #16]
 80034e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034e8:	2206      	movs	r2, #6
 80034ea:	4826      	ldr	r0, [pc, #152]	; (8003584 <_svfiprintf_r+0x1f0>)
 80034ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034f0:	f000 fa0c 	bl	800390c <memchr>
 80034f4:	2800      	cmp	r0, #0
 80034f6:	d038      	beq.n	800356a <_svfiprintf_r+0x1d6>
 80034f8:	4b23      	ldr	r3, [pc, #140]	; (8003588 <_svfiprintf_r+0x1f4>)
 80034fa:	bb1b      	cbnz	r3, 8003544 <_svfiprintf_r+0x1b0>
 80034fc:	9b03      	ldr	r3, [sp, #12]
 80034fe:	3307      	adds	r3, #7
 8003500:	f023 0307 	bic.w	r3, r3, #7
 8003504:	3308      	adds	r3, #8
 8003506:	9303      	str	r3, [sp, #12]
 8003508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800350a:	4433      	add	r3, r6
 800350c:	9309      	str	r3, [sp, #36]	; 0x24
 800350e:	e768      	b.n	80033e2 <_svfiprintf_r+0x4e>
 8003510:	460c      	mov	r4, r1
 8003512:	2001      	movs	r0, #1
 8003514:	fb0c 3202 	mla	r2, ip, r2, r3
 8003518:	e7a6      	b.n	8003468 <_svfiprintf_r+0xd4>
 800351a:	2300      	movs	r3, #0
 800351c:	f04f 0c0a 	mov.w	ip, #10
 8003520:	4619      	mov	r1, r3
 8003522:	3401      	adds	r4, #1
 8003524:	9305      	str	r3, [sp, #20]
 8003526:	4620      	mov	r0, r4
 8003528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800352c:	3a30      	subs	r2, #48	; 0x30
 800352e:	2a09      	cmp	r2, #9
 8003530:	d903      	bls.n	800353a <_svfiprintf_r+0x1a6>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0c6      	beq.n	80034c4 <_svfiprintf_r+0x130>
 8003536:	9105      	str	r1, [sp, #20]
 8003538:	e7c4      	b.n	80034c4 <_svfiprintf_r+0x130>
 800353a:	4604      	mov	r4, r0
 800353c:	2301      	movs	r3, #1
 800353e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003542:	e7f0      	b.n	8003526 <_svfiprintf_r+0x192>
 8003544:	ab03      	add	r3, sp, #12
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	462a      	mov	r2, r5
 800354a:	4638      	mov	r0, r7
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <_svfiprintf_r+0x1f8>)
 800354e:	a904      	add	r1, sp, #16
 8003550:	f3af 8000 	nop.w
 8003554:	1c42      	adds	r2, r0, #1
 8003556:	4606      	mov	r6, r0
 8003558:	d1d6      	bne.n	8003508 <_svfiprintf_r+0x174>
 800355a:	89ab      	ldrh	r3, [r5, #12]
 800355c:	065b      	lsls	r3, r3, #25
 800355e:	f53f af2d 	bmi.w	80033bc <_svfiprintf_r+0x28>
 8003562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003564:	b01d      	add	sp, #116	; 0x74
 8003566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800356a:	ab03      	add	r3, sp, #12
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	462a      	mov	r2, r5
 8003570:	4638      	mov	r0, r7
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <_svfiprintf_r+0x1f8>)
 8003574:	a904      	add	r1, sp, #16
 8003576:	f000 f87d 	bl	8003674 <_printf_i>
 800357a:	e7eb      	b.n	8003554 <_svfiprintf_r+0x1c0>
 800357c:	08003b1a 	.word	0x08003b1a
 8003580:	08003b20 	.word	0x08003b20
 8003584:	08003b24 	.word	0x08003b24
 8003588:	00000000 	.word	0x00000000
 800358c:	080032e1 	.word	0x080032e1

08003590 <_printf_common>:
 8003590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003594:	4616      	mov	r6, r2
 8003596:	4699      	mov	r9, r3
 8003598:	688a      	ldr	r2, [r1, #8]
 800359a:	690b      	ldr	r3, [r1, #16]
 800359c:	4607      	mov	r7, r0
 800359e:	4293      	cmp	r3, r2
 80035a0:	bfb8      	it	lt
 80035a2:	4613      	movlt	r3, r2
 80035a4:	6033      	str	r3, [r6, #0]
 80035a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035aa:	460c      	mov	r4, r1
 80035ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035b0:	b10a      	cbz	r2, 80035b6 <_printf_common+0x26>
 80035b2:	3301      	adds	r3, #1
 80035b4:	6033      	str	r3, [r6, #0]
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	0699      	lsls	r1, r3, #26
 80035ba:	bf42      	ittt	mi
 80035bc:	6833      	ldrmi	r3, [r6, #0]
 80035be:	3302      	addmi	r3, #2
 80035c0:	6033      	strmi	r3, [r6, #0]
 80035c2:	6825      	ldr	r5, [r4, #0]
 80035c4:	f015 0506 	ands.w	r5, r5, #6
 80035c8:	d106      	bne.n	80035d8 <_printf_common+0x48>
 80035ca:	f104 0a19 	add.w	sl, r4, #25
 80035ce:	68e3      	ldr	r3, [r4, #12]
 80035d0:	6832      	ldr	r2, [r6, #0]
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	42ab      	cmp	r3, r5
 80035d6:	dc2b      	bgt.n	8003630 <_printf_common+0xa0>
 80035d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035dc:	1e13      	subs	r3, r2, #0
 80035de:	6822      	ldr	r2, [r4, #0]
 80035e0:	bf18      	it	ne
 80035e2:	2301      	movne	r3, #1
 80035e4:	0692      	lsls	r2, r2, #26
 80035e6:	d430      	bmi.n	800364a <_printf_common+0xba>
 80035e8:	4649      	mov	r1, r9
 80035ea:	4638      	mov	r0, r7
 80035ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035f0:	47c0      	blx	r8
 80035f2:	3001      	adds	r0, #1
 80035f4:	d023      	beq.n	800363e <_printf_common+0xae>
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	6922      	ldr	r2, [r4, #16]
 80035fa:	f003 0306 	and.w	r3, r3, #6
 80035fe:	2b04      	cmp	r3, #4
 8003600:	bf14      	ite	ne
 8003602:	2500      	movne	r5, #0
 8003604:	6833      	ldreq	r3, [r6, #0]
 8003606:	f04f 0600 	mov.w	r6, #0
 800360a:	bf08      	it	eq
 800360c:	68e5      	ldreq	r5, [r4, #12]
 800360e:	f104 041a 	add.w	r4, r4, #26
 8003612:	bf08      	it	eq
 8003614:	1aed      	subeq	r5, r5, r3
 8003616:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800361a:	bf08      	it	eq
 800361c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003620:	4293      	cmp	r3, r2
 8003622:	bfc4      	itt	gt
 8003624:	1a9b      	subgt	r3, r3, r2
 8003626:	18ed      	addgt	r5, r5, r3
 8003628:	42b5      	cmp	r5, r6
 800362a:	d11a      	bne.n	8003662 <_printf_common+0xd2>
 800362c:	2000      	movs	r0, #0
 800362e:	e008      	b.n	8003642 <_printf_common+0xb2>
 8003630:	2301      	movs	r3, #1
 8003632:	4652      	mov	r2, sl
 8003634:	4649      	mov	r1, r9
 8003636:	4638      	mov	r0, r7
 8003638:	47c0      	blx	r8
 800363a:	3001      	adds	r0, #1
 800363c:	d103      	bne.n	8003646 <_printf_common+0xb6>
 800363e:	f04f 30ff 	mov.w	r0, #4294967295
 8003642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003646:	3501      	adds	r5, #1
 8003648:	e7c1      	b.n	80035ce <_printf_common+0x3e>
 800364a:	2030      	movs	r0, #48	; 0x30
 800364c:	18e1      	adds	r1, r4, r3
 800364e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003658:	4422      	add	r2, r4
 800365a:	3302      	adds	r3, #2
 800365c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003660:	e7c2      	b.n	80035e8 <_printf_common+0x58>
 8003662:	2301      	movs	r3, #1
 8003664:	4622      	mov	r2, r4
 8003666:	4649      	mov	r1, r9
 8003668:	4638      	mov	r0, r7
 800366a:	47c0      	blx	r8
 800366c:	3001      	adds	r0, #1
 800366e:	d0e6      	beq.n	800363e <_printf_common+0xae>
 8003670:	3601      	adds	r6, #1
 8003672:	e7d9      	b.n	8003628 <_printf_common+0x98>

08003674 <_printf_i>:
 8003674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003678:	7e0f      	ldrb	r7, [r1, #24]
 800367a:	4691      	mov	r9, r2
 800367c:	2f78      	cmp	r7, #120	; 0x78
 800367e:	4680      	mov	r8, r0
 8003680:	460c      	mov	r4, r1
 8003682:	469a      	mov	sl, r3
 8003684:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800368a:	d807      	bhi.n	800369c <_printf_i+0x28>
 800368c:	2f62      	cmp	r7, #98	; 0x62
 800368e:	d80a      	bhi.n	80036a6 <_printf_i+0x32>
 8003690:	2f00      	cmp	r7, #0
 8003692:	f000 80d5 	beq.w	8003840 <_printf_i+0x1cc>
 8003696:	2f58      	cmp	r7, #88	; 0x58
 8003698:	f000 80c1 	beq.w	800381e <_printf_i+0x1aa>
 800369c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036a4:	e03a      	b.n	800371c <_printf_i+0xa8>
 80036a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036aa:	2b15      	cmp	r3, #21
 80036ac:	d8f6      	bhi.n	800369c <_printf_i+0x28>
 80036ae:	a101      	add	r1, pc, #4	; (adr r1, 80036b4 <_printf_i+0x40>)
 80036b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036b4:	0800370d 	.word	0x0800370d
 80036b8:	08003721 	.word	0x08003721
 80036bc:	0800369d 	.word	0x0800369d
 80036c0:	0800369d 	.word	0x0800369d
 80036c4:	0800369d 	.word	0x0800369d
 80036c8:	0800369d 	.word	0x0800369d
 80036cc:	08003721 	.word	0x08003721
 80036d0:	0800369d 	.word	0x0800369d
 80036d4:	0800369d 	.word	0x0800369d
 80036d8:	0800369d 	.word	0x0800369d
 80036dc:	0800369d 	.word	0x0800369d
 80036e0:	08003827 	.word	0x08003827
 80036e4:	0800374d 	.word	0x0800374d
 80036e8:	080037e1 	.word	0x080037e1
 80036ec:	0800369d 	.word	0x0800369d
 80036f0:	0800369d 	.word	0x0800369d
 80036f4:	08003849 	.word	0x08003849
 80036f8:	0800369d 	.word	0x0800369d
 80036fc:	0800374d 	.word	0x0800374d
 8003700:	0800369d 	.word	0x0800369d
 8003704:	0800369d 	.word	0x0800369d
 8003708:	080037e9 	.word	0x080037e9
 800370c:	682b      	ldr	r3, [r5, #0]
 800370e:	1d1a      	adds	r2, r3, #4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	602a      	str	r2, [r5, #0]
 8003714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800371c:	2301      	movs	r3, #1
 800371e:	e0a0      	b.n	8003862 <_printf_i+0x1ee>
 8003720:	6820      	ldr	r0, [r4, #0]
 8003722:	682b      	ldr	r3, [r5, #0]
 8003724:	0607      	lsls	r7, r0, #24
 8003726:	f103 0104 	add.w	r1, r3, #4
 800372a:	6029      	str	r1, [r5, #0]
 800372c:	d501      	bpl.n	8003732 <_printf_i+0xbe>
 800372e:	681e      	ldr	r6, [r3, #0]
 8003730:	e003      	b.n	800373a <_printf_i+0xc6>
 8003732:	0646      	lsls	r6, r0, #25
 8003734:	d5fb      	bpl.n	800372e <_printf_i+0xba>
 8003736:	f9b3 6000 	ldrsh.w	r6, [r3]
 800373a:	2e00      	cmp	r6, #0
 800373c:	da03      	bge.n	8003746 <_printf_i+0xd2>
 800373e:	232d      	movs	r3, #45	; 0x2d
 8003740:	4276      	negs	r6, r6
 8003742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003746:	230a      	movs	r3, #10
 8003748:	4859      	ldr	r0, [pc, #356]	; (80038b0 <_printf_i+0x23c>)
 800374a:	e012      	b.n	8003772 <_printf_i+0xfe>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	6820      	ldr	r0, [r4, #0]
 8003750:	1d19      	adds	r1, r3, #4
 8003752:	6029      	str	r1, [r5, #0]
 8003754:	0605      	lsls	r5, r0, #24
 8003756:	d501      	bpl.n	800375c <_printf_i+0xe8>
 8003758:	681e      	ldr	r6, [r3, #0]
 800375a:	e002      	b.n	8003762 <_printf_i+0xee>
 800375c:	0641      	lsls	r1, r0, #25
 800375e:	d5fb      	bpl.n	8003758 <_printf_i+0xe4>
 8003760:	881e      	ldrh	r6, [r3, #0]
 8003762:	2f6f      	cmp	r7, #111	; 0x6f
 8003764:	bf0c      	ite	eq
 8003766:	2308      	moveq	r3, #8
 8003768:	230a      	movne	r3, #10
 800376a:	4851      	ldr	r0, [pc, #324]	; (80038b0 <_printf_i+0x23c>)
 800376c:	2100      	movs	r1, #0
 800376e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003772:	6865      	ldr	r5, [r4, #4]
 8003774:	2d00      	cmp	r5, #0
 8003776:	bfa8      	it	ge
 8003778:	6821      	ldrge	r1, [r4, #0]
 800377a:	60a5      	str	r5, [r4, #8]
 800377c:	bfa4      	itt	ge
 800377e:	f021 0104 	bicge.w	r1, r1, #4
 8003782:	6021      	strge	r1, [r4, #0]
 8003784:	b90e      	cbnz	r6, 800378a <_printf_i+0x116>
 8003786:	2d00      	cmp	r5, #0
 8003788:	d04b      	beq.n	8003822 <_printf_i+0x1ae>
 800378a:	4615      	mov	r5, r2
 800378c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003790:	fb03 6711 	mls	r7, r3, r1, r6
 8003794:	5dc7      	ldrb	r7, [r0, r7]
 8003796:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800379a:	4637      	mov	r7, r6
 800379c:	42bb      	cmp	r3, r7
 800379e:	460e      	mov	r6, r1
 80037a0:	d9f4      	bls.n	800378c <_printf_i+0x118>
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d10b      	bne.n	80037be <_printf_i+0x14a>
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	07de      	lsls	r6, r3, #31
 80037aa:	d508      	bpl.n	80037be <_printf_i+0x14a>
 80037ac:	6923      	ldr	r3, [r4, #16]
 80037ae:	6861      	ldr	r1, [r4, #4]
 80037b0:	4299      	cmp	r1, r3
 80037b2:	bfde      	ittt	le
 80037b4:	2330      	movle	r3, #48	; 0x30
 80037b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037be:	1b52      	subs	r2, r2, r5
 80037c0:	6122      	str	r2, [r4, #16]
 80037c2:	464b      	mov	r3, r9
 80037c4:	4621      	mov	r1, r4
 80037c6:	4640      	mov	r0, r8
 80037c8:	f8cd a000 	str.w	sl, [sp]
 80037cc:	aa03      	add	r2, sp, #12
 80037ce:	f7ff fedf 	bl	8003590 <_printf_common>
 80037d2:	3001      	adds	r0, #1
 80037d4:	d14a      	bne.n	800386c <_printf_i+0x1f8>
 80037d6:	f04f 30ff 	mov.w	r0, #4294967295
 80037da:	b004      	add	sp, #16
 80037dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	f043 0320 	orr.w	r3, r3, #32
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	2778      	movs	r7, #120	; 0x78
 80037ea:	4832      	ldr	r0, [pc, #200]	; (80038b4 <_printf_i+0x240>)
 80037ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	6829      	ldr	r1, [r5, #0]
 80037f4:	061f      	lsls	r7, r3, #24
 80037f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80037fa:	d402      	bmi.n	8003802 <_printf_i+0x18e>
 80037fc:	065f      	lsls	r7, r3, #25
 80037fe:	bf48      	it	mi
 8003800:	b2b6      	uxthmi	r6, r6
 8003802:	07df      	lsls	r7, r3, #31
 8003804:	bf48      	it	mi
 8003806:	f043 0320 	orrmi.w	r3, r3, #32
 800380a:	6029      	str	r1, [r5, #0]
 800380c:	bf48      	it	mi
 800380e:	6023      	strmi	r3, [r4, #0]
 8003810:	b91e      	cbnz	r6, 800381a <_printf_i+0x1a6>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	f023 0320 	bic.w	r3, r3, #32
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	2310      	movs	r3, #16
 800381c:	e7a6      	b.n	800376c <_printf_i+0xf8>
 800381e:	4824      	ldr	r0, [pc, #144]	; (80038b0 <_printf_i+0x23c>)
 8003820:	e7e4      	b.n	80037ec <_printf_i+0x178>
 8003822:	4615      	mov	r5, r2
 8003824:	e7bd      	b.n	80037a2 <_printf_i+0x12e>
 8003826:	682b      	ldr	r3, [r5, #0]
 8003828:	6826      	ldr	r6, [r4, #0]
 800382a:	1d18      	adds	r0, r3, #4
 800382c:	6961      	ldr	r1, [r4, #20]
 800382e:	6028      	str	r0, [r5, #0]
 8003830:	0635      	lsls	r5, r6, #24
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	d501      	bpl.n	800383a <_printf_i+0x1c6>
 8003836:	6019      	str	r1, [r3, #0]
 8003838:	e002      	b.n	8003840 <_printf_i+0x1cc>
 800383a:	0670      	lsls	r0, r6, #25
 800383c:	d5fb      	bpl.n	8003836 <_printf_i+0x1c2>
 800383e:	8019      	strh	r1, [r3, #0]
 8003840:	2300      	movs	r3, #0
 8003842:	4615      	mov	r5, r2
 8003844:	6123      	str	r3, [r4, #16]
 8003846:	e7bc      	b.n	80037c2 <_printf_i+0x14e>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	2100      	movs	r1, #0
 800384c:	1d1a      	adds	r2, r3, #4
 800384e:	602a      	str	r2, [r5, #0]
 8003850:	681d      	ldr	r5, [r3, #0]
 8003852:	6862      	ldr	r2, [r4, #4]
 8003854:	4628      	mov	r0, r5
 8003856:	f000 f859 	bl	800390c <memchr>
 800385a:	b108      	cbz	r0, 8003860 <_printf_i+0x1ec>
 800385c:	1b40      	subs	r0, r0, r5
 800385e:	6060      	str	r0, [r4, #4]
 8003860:	6863      	ldr	r3, [r4, #4]
 8003862:	6123      	str	r3, [r4, #16]
 8003864:	2300      	movs	r3, #0
 8003866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800386a:	e7aa      	b.n	80037c2 <_printf_i+0x14e>
 800386c:	462a      	mov	r2, r5
 800386e:	4649      	mov	r1, r9
 8003870:	4640      	mov	r0, r8
 8003872:	6923      	ldr	r3, [r4, #16]
 8003874:	47d0      	blx	sl
 8003876:	3001      	adds	r0, #1
 8003878:	d0ad      	beq.n	80037d6 <_printf_i+0x162>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	079b      	lsls	r3, r3, #30
 800387e:	d413      	bmi.n	80038a8 <_printf_i+0x234>
 8003880:	68e0      	ldr	r0, [r4, #12]
 8003882:	9b03      	ldr	r3, [sp, #12]
 8003884:	4298      	cmp	r0, r3
 8003886:	bfb8      	it	lt
 8003888:	4618      	movlt	r0, r3
 800388a:	e7a6      	b.n	80037da <_printf_i+0x166>
 800388c:	2301      	movs	r3, #1
 800388e:	4632      	mov	r2, r6
 8003890:	4649      	mov	r1, r9
 8003892:	4640      	mov	r0, r8
 8003894:	47d0      	blx	sl
 8003896:	3001      	adds	r0, #1
 8003898:	d09d      	beq.n	80037d6 <_printf_i+0x162>
 800389a:	3501      	adds	r5, #1
 800389c:	68e3      	ldr	r3, [r4, #12]
 800389e:	9903      	ldr	r1, [sp, #12]
 80038a0:	1a5b      	subs	r3, r3, r1
 80038a2:	42ab      	cmp	r3, r5
 80038a4:	dcf2      	bgt.n	800388c <_printf_i+0x218>
 80038a6:	e7eb      	b.n	8003880 <_printf_i+0x20c>
 80038a8:	2500      	movs	r5, #0
 80038aa:	f104 0619 	add.w	r6, r4, #25
 80038ae:	e7f5      	b.n	800389c <_printf_i+0x228>
 80038b0:	08003b2b 	.word	0x08003b2b
 80038b4:	08003b3c 	.word	0x08003b3c

080038b8 <memmove>:
 80038b8:	4288      	cmp	r0, r1
 80038ba:	b510      	push	{r4, lr}
 80038bc:	eb01 0402 	add.w	r4, r1, r2
 80038c0:	d902      	bls.n	80038c8 <memmove+0x10>
 80038c2:	4284      	cmp	r4, r0
 80038c4:	4623      	mov	r3, r4
 80038c6:	d807      	bhi.n	80038d8 <memmove+0x20>
 80038c8:	1e43      	subs	r3, r0, #1
 80038ca:	42a1      	cmp	r1, r4
 80038cc:	d008      	beq.n	80038e0 <memmove+0x28>
 80038ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038d6:	e7f8      	b.n	80038ca <memmove+0x12>
 80038d8:	4601      	mov	r1, r0
 80038da:	4402      	add	r2, r0
 80038dc:	428a      	cmp	r2, r1
 80038de:	d100      	bne.n	80038e2 <memmove+0x2a>
 80038e0:	bd10      	pop	{r4, pc}
 80038e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038ea:	e7f7      	b.n	80038dc <memmove+0x24>

080038ec <_sbrk_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	2300      	movs	r3, #0
 80038f0:	4d05      	ldr	r5, [pc, #20]	; (8003908 <_sbrk_r+0x1c>)
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	602b      	str	r3, [r5, #0]
 80038f8:	f7fd fe46 	bl	8001588 <_sbrk>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_sbrk_r+0x1a>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	b103      	cbz	r3, 8003906 <_sbrk_r+0x1a>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	20000588 	.word	0x20000588

0800390c <memchr>:
 800390c:	4603      	mov	r3, r0
 800390e:	b510      	push	{r4, lr}
 8003910:	b2c9      	uxtb	r1, r1
 8003912:	4402      	add	r2, r0
 8003914:	4293      	cmp	r3, r2
 8003916:	4618      	mov	r0, r3
 8003918:	d101      	bne.n	800391e <memchr+0x12>
 800391a:	2000      	movs	r0, #0
 800391c:	e003      	b.n	8003926 <memchr+0x1a>
 800391e:	7804      	ldrb	r4, [r0, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	428c      	cmp	r4, r1
 8003924:	d1f6      	bne.n	8003914 <memchr+0x8>
 8003926:	bd10      	pop	{r4, pc}

08003928 <memcpy>:
 8003928:	440a      	add	r2, r1
 800392a:	4291      	cmp	r1, r2
 800392c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003930:	d100      	bne.n	8003934 <memcpy+0xc>
 8003932:	4770      	bx	lr
 8003934:	b510      	push	{r4, lr}
 8003936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800393a:	4291      	cmp	r1, r2
 800393c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003940:	d1f9      	bne.n	8003936 <memcpy+0xe>
 8003942:	bd10      	pop	{r4, pc}

08003944 <_realloc_r>:
 8003944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003948:	4680      	mov	r8, r0
 800394a:	4614      	mov	r4, r2
 800394c:	460e      	mov	r6, r1
 800394e:	b921      	cbnz	r1, 800395a <_realloc_r+0x16>
 8003950:	4611      	mov	r1, r2
 8003952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003956:	f7ff bc37 	b.w	80031c8 <_malloc_r>
 800395a:	b92a      	cbnz	r2, 8003968 <_realloc_r+0x24>
 800395c:	f7ff fbcc 	bl	80030f8 <_free_r>
 8003960:	4625      	mov	r5, r4
 8003962:	4628      	mov	r0, r5
 8003964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003968:	f000 f81b 	bl	80039a2 <_malloc_usable_size_r>
 800396c:	4284      	cmp	r4, r0
 800396e:	4607      	mov	r7, r0
 8003970:	d802      	bhi.n	8003978 <_realloc_r+0x34>
 8003972:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003976:	d812      	bhi.n	800399e <_realloc_r+0x5a>
 8003978:	4621      	mov	r1, r4
 800397a:	4640      	mov	r0, r8
 800397c:	f7ff fc24 	bl	80031c8 <_malloc_r>
 8003980:	4605      	mov	r5, r0
 8003982:	2800      	cmp	r0, #0
 8003984:	d0ed      	beq.n	8003962 <_realloc_r+0x1e>
 8003986:	42bc      	cmp	r4, r7
 8003988:	4622      	mov	r2, r4
 800398a:	4631      	mov	r1, r6
 800398c:	bf28      	it	cs
 800398e:	463a      	movcs	r2, r7
 8003990:	f7ff ffca 	bl	8003928 <memcpy>
 8003994:	4631      	mov	r1, r6
 8003996:	4640      	mov	r0, r8
 8003998:	f7ff fbae 	bl	80030f8 <_free_r>
 800399c:	e7e1      	b.n	8003962 <_realloc_r+0x1e>
 800399e:	4635      	mov	r5, r6
 80039a0:	e7df      	b.n	8003962 <_realloc_r+0x1e>

080039a2 <_malloc_usable_size_r>:
 80039a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039a6:	1f18      	subs	r0, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bfbc      	itt	lt
 80039ac:	580b      	ldrlt	r3, [r1, r0]
 80039ae:	18c0      	addlt	r0, r0, r3
 80039b0:	4770      	bx	lr
	...

080039b4 <_init>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	bf00      	nop
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr

080039c0 <_fini>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr
